<section class="content-section" aria-labelledby="contact-heading">
	<h2 id="contact-heading" class="page-h2">Contact</h2>
	<div
		id="form-status-message"
		role="status"
		aria-live="assertive"
		aria-atomic="true"
		class="toast"
		tabindex="-1"
	></div>

	<form
		name="contact-form"
		id="contact-form"
		method="POST"
		data-netlify="true"
		data-netlify-honeypot="bot-field"
		aria-labelledby="form-title"
		novalidate
	>
		<input type="hidden" name="form-name" value="contact-form" />
		<h3 id="form-title" class="form-main-title">Get in Touch!</h3>

		<div class="form-group">
			<label for="name" class="required">Name:</label>
			<input
				type="text"
				id="name"
				name="name"
				required
				aria-required="true"
				placeholder="Enter your name"
				minlength="2"
				autocomplete="name"
				aria-describedby="name-error"
			/>
			<span id="name-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="email" class="required">Email:</label>
			<input
				type="email"
				id="email"
				name="email"
				required
				aria-required="true"
				placeholder="Enter your email"
				autocomplete="email"
				aria-describedby="email-error"
			/>
			<span id="email-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="subject" class="required">Subject:</label>
			<input
				type="text"
				id="subject"
				name="subject"
				required
				aria-required="true"
				placeholder="Enter message subject"
				aria-describedby="subject-error"
			/>
			<span id="subject-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="message" class="required">Message:</label>
			<textarea
				id="message"
				name="message"
				required
				aria-required="true"
				placeholder="Write your message here"
				aria-describedby="message-error"
				rows="5"
			></textarea>
			<span id="message-error" class="error-message" aria-live="polite"></span>
		</div>

		<button type="submit" aria-label="Send message" id="submit-button">Send Email!</button>
	</form>
</section>


<script is:inline>
	document.addEventListener("DOMContentLoaded", () => {
		const form = document.getElementById("contact-form");
		if (!form || !(form instanceof HTMLFormElement)) return;
		const requiredFields = Array.from(form.querySelectorAll("input[required], textarea[required]"));
		const submitBtn = document.getElementById("submit-button");
		const toast = document.getElementById("form-status-message");
	
		// Toast helpers
		let toastTimer = null;
		function showToast(message, variant = "error", duration = 4500) {
			if (!toast) return;
			toast.className = "toast";
			toast.textContent = message;
			toast.classList.add(variant);
			void toast.offsetWidth; // force reflow to restart animations
			toast.classList.add("visible");
			try { toast.focus(); } catch (err) { /* ignore focus errors */ }
			if (toastTimer) { clearTimeout(toastTimer); toastTimer = null; }
			toastTimer = setTimeout(hideToast, duration);
		}
		function hideToast() {
			if (!toast) return;
			toast.classList.remove("visible");
			if (toastTimer) { clearTimeout(toastTimer); toastTimer = null; }
			setTimeout(() => {
				if (toast && !toast.classList.contains("visible")) {
					toast.textContent = "";
					toast.className = "toast";
				}
			}, 260);
		}
		if (toast) toast.addEventListener("click", hideToast);
	
		// Field error helpers
		function setFieldError(field, message) {
			const span = document.getElementById(`${field.id}-error`);
			if (span) span.textContent = message;
			field.setAttribute("aria-invalid", "true");
			const label = form.querySelector(`label[for="${field.id}"]`);
			if (label) label.setAttribute("aria-invalid", "true");
		}
		function clearFieldError(field) {
			const span = document.getElementById(`${field.id}-error`);
			if (span) span.textContent = "";
			field.removeAttribute("aria-invalid");
			const label = form.querySelector(`label[for="${field.id}"]`);
			if (label) label.removeAttribute("aria-invalid");
		}
	
		// Compute the appropriate error message for a field, or null if valid.
		function computeFieldError(field) {
			const value = (field.value || "").trim();
			// required check
			if (!value) return "This field is required";
			// email format
			if (field instanceof HTMLInputElement && field.type === "email" && !field.validity.valid) {
				return "Please enter a valid email address";
			}
			// minlength
			if (field instanceof HTMLInputElement && field.minLength > 0 && value.length < field.minLength) {
				return `Must be at least ${field.minLength} characters`;
			}
			// native validity (fallback)
			if (!field.validity.valid) return "Invalid value";
			return null;
		}
	
		// Per-field event listeners: invalid -> set friendly message; input -> clear when valid
		requiredFields.forEach((field) => {
			const errorSpan = document.getElementById(`${field.id}-error`);
			if (!errorSpan) return;
	
			field.addEventListener("invalid", (e) => {
				e.preventDefault(); // suppress native bubble
				const msg = computeFieldError(field) || "Invalid value";
				setFieldError(field, msg);
			});
	
			field.addEventListener("input", () => {
				if (field.validity.valid) clearFieldError(field);
			});
		});
	
		// Form submit: validate using the shared computeFieldError helper, then submit via fetch
		form.addEventListener("submit", async (e) => {
			e.preventDefault();
			let formIsValid = true;
			requiredFields.forEach((field) => {
				clearFieldError(field);
				const err = computeFieldError(field);
				if (err) {
					formIsValid = false;
					setFieldError(field, err);
				}
			});
	
			if (!formIsValid) {
				showToast("Please correct the highlighted fields.", "error");
				return;
			}
	
			if (!submitBtn || !(submitBtn instanceof HTMLButtonElement)) return;
			submitBtn.disabled = true;
			submitBtn.textContent = "Sending...";
	
			try {
				const response = await fetch(form.action, {
					method: form.method,
					body: new FormData(form),
				});
	
				if (response.ok) {
					form.reset();
					requiredFields.forEach((f) => clearFieldError(f));
					showToast("Message sent successfully!", "success");
				} else {
					let errorMessage = "Failed to send message. Please try again.";
					try {
						const errorData = await response.json();
						if (errorData && typeof errorData.message === "string" && errorData.message.trim()) {
							errorMessage = errorData.message;
						}
					} catch (err) { /* ignore JSON parse errors */ }
					showToast(errorMessage, "error");
				}
			} catch (err) {
				showToast("Network error. Please try again.", "error");
			} finally {
				submitBtn.disabled = false;
				submitBtn.textContent = "Send Email!";
			}
		});
	});
</script>
