<section class="content-section" aria-labelledby="contact-heading">
	<h2 id="contact-heading" class="page-h2">Contact</h2>

	<!-- Status toast for submission results (assertive for screen readers) -->
	<div
		id="form-status-message"
		role="status"
		aria-live="assertive"
		aria-atomic="true"
		class="toast"
		tabindex="-1"
	></div>

	<form
		name="contact-form"
		id="contact-form"
		method="POST"
		data-netlify="true"
		data-netlify-honeypot="bot-field"
		aria-labelledby="form-title"
		novalidate
	>
		<input type="hidden" name="form-name" value="contact-form" />
		<h3 id="form-title" class="form-main-title">Get in Touch!</h3>

		<div class="form-group">
			<label for="name" class="required">Name:</label>
			<input
				type="text"
				id="name"
				name="name"
				required
				aria-required="true"
				placeholder="Enter your name"
				minlength="2"
				autocomplete="name"
				aria-describedby="name-error"
			/>
			<span id="name-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="email" class="required">Email:</label>
			<input
				type="email"
				id="email"
				name="email"
				required
				aria-required="true"
				placeholder="Enter your email"
				autocomplete="email"
				aria-describedby="email-error"
			/>
			<span id="email-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="subject" class="required">Subject:</label>
			<input
				type="text"
				id="subject"
				name="subject"
				required
				aria-required="true"
				placeholder="Enter message subject"
				aria-describedby="subject-error"
			/>
			<span id="subject-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="message" class="required">Message:</label>
			<textarea
				id="message"
				name="message"
				required
				aria-required="true"
				placeholder="Write your message here"
				aria-describedby="message-error"
				rows="5"
			></textarea>
			<span id="message-error" class="error-message" aria-live="polite"></span>
		</div>

		<button type="submit" aria-label="Send message" id="submit-button">Send Email!</button>
	</form>
</section>


<script is:inline>
	// Grouped script: constants & DOM selection, helpers, event listeners
	document.addEventListener("DOMContentLoaded", () => {
		// Constants & DOM selection
		const form = document.getElementById("contact-form");
		if (!form || !(form instanceof HTMLFormElement)) return;
		const inputs = Array.from(form.querySelectorAll("input[required], textarea[required]"));
		const submitButton = document.getElementById("submit-button");
		const toast = document.getElementById("form-status-message");

		// Helpers: toast control
		let toastTimeout = null;
		function showToast(message, variant = "error", duration = 4500) {
			if (!toast) return;
			toast.className = "toast";
			toast.textContent = message;
			toast.classList.add(variant);
			void toast.offsetWidth; // force reflow
			toast.classList.add("visible");
			try { toast.focus(); } catch (e) { /* no-op */ }
			if (toastTimeout) { clearTimeout(toastTimeout); toastTimeout = null; }
			toastTimeout = setTimeout(hideToast, duration);
		}
		function hideToast() {
			if (!toast) return;
			toast.classList.remove("visible");
			if (toastTimeout) { clearTimeout(toastTimeout); toastTimeout = null; }
			setTimeout(() => {
				if (toast && !toast.classList.contains("visible")) {
					toast.textContent = "";
					toast.className = "toast";
				}
			}, 260);
		}
		if (toast) toast.addEventListener("click", hideToast);

		// Helpers: per-field error handling
		function setFieldError(input, message) {
			const errorSpan = document.getElementById(`${input.id}-error`);
			if (errorSpan) errorSpan.textContent = message;
			input.setAttribute("aria-invalid", "true");
			const label = form.querySelector(`label[for="${input.id}"]`);
			if (label) label.setAttribute("aria-invalid", "true");
		}
		function clearFieldError(input) {
			const errorSpan = document.getElementById(`${input.id}-error`);
			if (errorSpan) errorSpan.textContent = "";
			input.removeAttribute("aria-invalid");
			const label = form.querySelector(`label[for="${input.id}"]`);
			if (label) label.removeAttribute("aria-invalid");
		}

		// Event listeners: per-field invalid/input
		inputs.forEach((input) => {
			const errorSpan = document.getElementById(`${input.id}-error`);
			if (!errorSpan) return;

			input.addEventListener("invalid", (event) => {
				event.preventDefault(); // suppress native bubble
				if (!input.value.trim()) {
					setFieldError(input, "This field is required");
				} else if (
					input instanceof HTMLInputElement &&
					input.type === "email" &&
					!input.validity.valid
				) {
					setFieldError(input, "Please enter a valid email address");
				} else if (
					input instanceof HTMLInputElement &&
					input.minLength > 0 &&
					input.value.length < input.minLength
				) {
					setFieldError(input, `Must be at least ${input.minLength} characters`);
				} else {
					setFieldError(input, "Invalid value");
				}
			});

			input.addEventListener("input", () => {
				if (input.validity.valid) {
					clearFieldError(input);
				}
			});
		});

		// Event listeners: form submit (validation + Netlify submission via fetch)
		form.addEventListener("submit", async (event) => {
			event.preventDefault();
			let isFormValid = true;
			inputs.forEach((input) => {
				clearFieldError(input);
				if (!input.validity.valid) {
					isFormValid = false;
					if (!input.value.trim()) {
						setFieldError(input, "This field is required");
					} else if (
						input instanceof HTMLInputElement &&
						input.type === "email" &&
						!input.validity.valid
					) {
						setFieldError(input, "Please enter a valid email address");
					} else if (
						input instanceof HTMLInputElement &&
						input.minLength > 0 &&
						input.value.length < input.minLength
					) {
						setFieldError(input, `Must be at least ${input.minLength} characters`);
					} else {
						setFieldError(input, "Invalid value");
					}
				}
			});

			if (!isFormValid) {
				showToast("Please correct the highlighted fields.", "error");
				return;
			}

			if (!submitButton || !(submitButton instanceof HTMLButtonElement)) return;
			submitButton.disabled = true;
			submitButton.textContent = "Sending...";

			try {
				const response = await fetch(form.action, {
					method: form.method,
					body: new FormData(form),
				});

				if (response.ok) {
					form.reset();
					inputs.forEach((input) => clearFieldError(input));
					showToast("Message sent successfully!", "success");
				} else {
					let errorMessage = "Failed to send message. Please try again.";
					try {
						const errorData = await response.json();
						if (errorData && typeof errorData.message === "string" && errorData.message.trim()) {
							errorMessage = errorData.message;
						}
					} catch (e) { /* ignore */ }
					showToast(errorMessage, "error");
				}
			} catch (e) {
				showToast("Network error. Please try again.", "error");
			} finally {
				submitButton.disabled = false;
				submitButton.textContent = "Send Email!";
			}
		});
	});
</script>
