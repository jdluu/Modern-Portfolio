---
import ExperienceCardList from "../ui/ExperienceCardList";
import ExperienceCard from "../ui/ExperienceCard.astro";
import { getCollection } from "astro:content";
  
/**
 * Loading strategy (centralized):
 * - Use the Astro content collection `experiencecards` at build-time.
 * - Map collection entries into the lightweight ExperienceCardItem shape expected
 *   by the client-side ExperienceCardList island.
 * - Client-side (Solid) will handle sorting and filtering with zero additional API calls.
 */
const raw = (await getCollection("experiencecards")) ?? [];
const experiences = (raw ?? []).map((e: any) => {
  return {
    title: e.data?.title ?? "Untitled",
    slug: String(e.id ?? "").toLowerCase(),
    metadata: e.data?.metadata ?? {},
  };
});
---
<section class="content-section">
	<h2 id="experience" class="page-h2">Experience</h2>
	<p class="section-desc">
		<strong>My professional journey</strong>
	</p>
	<!-- Client island (controls + visibility) -->
	<ExperienceCardList client:load initialItems={experiences} />

	<!-- Server-rendered grid of ExperienceCard items for SEO and initial markup.
	     The client island will toggle visibility of these cards via data-slug attributes. -->
	<div class="experience-grid">
		{experiences.map((e) => (
			<div class="experience-item" data-slug={String(e.slug ?? "").replace(/\.(md|mdx)$/, "")}>
				<ExperienceCard item={e} />
			</div>
		))}
	</div>

	<!-- Pagination portal: client island will move the pagination controls here so they render
	     visually underneath the server-rendered card grid while controls remain in the client island. -->
	<div id="experience-pagination-portal" class="experience-pagination-portal" aria-hidden="false"></div>
</section>

<style>
	.page-h2 {
		font-family: var(--m3-font-family-display);
		font-size: var(--m3-font-headline-large);
		color: var(--m3-color-on-background);
		text-align: center;
		margin-bottom: 1rem;
	}

	.section-desc {
		font-size: var(--m3-font-body-large);
		color: var(--m3-color-on-surface-variant);
		text-align: center;
		margin-bottom: 4rem;
	}

	/* Ensure the section centers content the same way as Projects */
	.content-section {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 4rem 2rem;
	}
	
	/* Experience-specific grid (mobile-first) with explicit guards to prevent global overrides */
	.experience-grid {
		display: grid !important;
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;
		gap: 2rem;
		grid-template-columns: 1fr; /* base */
		justify-items: stretch;
		align-items: stretch;
		grid-auto-flow: row dense;
	}
	
	/* Prevent external/global styles from making children span all columns */
	.experience-grid > .experience-item {
		grid-column: auto !important;
		min-width: 0; /* avoid content overflow forcing new lines */
	}
	
	@media (min-width: 768px) {
		.experience-grid {
			grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
		}
	}
	@media (min-width: 1024px) {
		.experience-grid {
			grid-template-columns: repeat(3, minmax(0, 1fr)) !important;
		}
	}

	/* Controls/pagination styles moved to public/styles/global.css for site-wide consistency */
</style>
