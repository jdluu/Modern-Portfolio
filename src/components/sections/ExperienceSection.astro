---
import ExperienceCardList from "../ui/ExperienceCardList";
import ExperienceCard from "../ui/ExperienceCard.astro";
import { getCollection } from "astro:content";
  
const rawCollection = (await getCollection("experiencecards")) ?? [];
function mapEntryToExperience(item: any) {
  const entrySlug =
    typeof item?.slug === "string"
      ? item.slug
      : String(item?.id ?? "").replace(/\.(md|mdx)$/i, "");
  const d = item?.data ?? {};
  return {
    title: d?.title ?? "Untitled",
    slug: entrySlug,
    // Read flattened frontmatter fields (migrated to top-level in content/config.ts)
    company: d.company ?? null,
    date: d.date ?? null,
    startDate: d.startDate ?? null,
    endDate: d.endDate ?? null,
    thumbnail: d.thumbnail ?? null,
    summary: d.summary ?? null,
  };
}
const experiences = (rawCollection ?? []).map(mapEntryToExperience);
---
<section class="experience-section content-section">
	<h2 id="experience" class="page-h2">Experience</h2>
	<!-- Client island (controls + visibility) -->
	<ExperienceCardList client:load initialItems={experiences} />

	<!-- Server-rendered grid of ExperienceCard items for SEO and initial markup.
	     The client island will toggle visibility of these cards via data-slug attributes. -->
	<div class="experience-grid">
		{experiences.map((e) => (
			<div class="experience-item" data-slug={e.slug ?? ""}>
				<ExperienceCard item={e} />
			</div>
		))}
	</div>

	<!-- Pagination portal: client island will move the pagination controls here so they render
	     visually underneath the server-rendered card grid while controls remain in the client island. -->
	<div id="experience-pagination-portal" class="experience-pagination-portal" aria-hidden="false"></div>
</section>

