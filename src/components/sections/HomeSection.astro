<section class="content-section homepage-intro-section">
	<div class="background-shapes" aria-hidden="true">
		<div class="shape shape1"></div>
		<div class="shape shape2"></div>
		<div class="shape shape3"></div>
	</div>

	<h2 id="home" class="page-h2">Home</h2>

	<div class="intro-content" id="intro-elements">
		<div>
			<p class="intro-greeting">Hi, I'm Jeffrey Luu</p>
			<h1 class="intro-role">Developer and Designer</h1>
			<p class="intro-tagline">Advancing technology, empowering people</p>
		</div>

		<div class="resume-button-wrapper">
			<a
				class="resume-link"
				href="https://drive.google.com/file/d/1NvgQjI2QdMaA8ZI_vNpvlE9Gw7032Ddk/view?usp=sharing"
				target="_blank"
				rel="noopener noreferrer"
				aria-label="Download Jeffrey Luuâ€™s Resume (PDF)"
			>
				Download Resume (PDF)
			</a>
		</div>
	</div>
</section>

<script>
	// Script groups: reduced-motion guard, constants & selection, helpers, event listeners.
	// Preserves init timing (post-paint) and rAF-based mousemove throttling.
	(function () {
		const prefersReduced = window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches;

		function initAfterPaint() {
			const introElements = document.getElementById("intro-elements");
			const contentSection = document.querySelector(".content-section");

			// Trigger decorative entrance animations (keeps elements visible at initial paint for LCP)
			if (introElements) introElements.classList.add("animate-hero");

			// Parallax: attach only when user does not prefer reduced motion
			if (introElements && contentSection && !prefersReduced) {
				let rafPending = false;
				const container = contentSection as HTMLElement;
				container.addEventListener("mousemove", (e: MouseEvent) => {
					if (rafPending) return;
					rafPending = true;
					const { clientX, clientY } = e;
					const rect = container.getBoundingClientRect();
					requestAnimationFrame(() => {
						const moveX = (clientX - (rect.left + rect.width / 2)) / 50;
						const moveY = (clientY - (rect.top + rect.height / 2)) / 50;
						introElements.style.transform = `translate(${moveX}px, ${moveY}px)`;
						rafPending = false;
					});
				});
			}
		}

		// Ensure init runs after first paint
		if (document.readyState === "complete" || document.readyState === "interactive") {
			requestAnimationFrame(initAfterPaint);
		} else {
			document.addEventListener("DOMContentLoaded", () => requestAnimationFrame(initAfterPaint));
		}
	})();
</script>

