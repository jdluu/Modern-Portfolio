<section class="content-section" aria-labelledby="contact-heading">
	<h2 id="contact-heading" class="page-h2">Contact</h2>

	<div
		id="form-status-message"
		role="status"
		aria-live="assertive"
		class="form-status"
	>
	</div>

	<form
		name="contact-form"
		id="contact-form"
		method="POST"
		data-netlify="true"
		data-netlify-honeypot="bot-field"
		aria-labelledby="form-title"
		novalidate
	>
		<input type="hidden" name="form-name" value="contact-form" />
		<h3 id="form-title" class="form-main-title">Get in Touch!</h3>

		<div class="form-group">
			<label for="name" class="required">Name:</label>
			<input
				type="text"
				id="name"
				name="name"
				required
				aria-required="true"
				placeholder="Enter your name"
				minlength="2"
				autocomplete="name"
				aria-describedby="name-error"
			/>
			<span id="name-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="email" class="required">Email:</label>
			<input
				type="email"
				id="email"
				name="email"
				required
				aria-required="true"
				placeholder="Enter your email"
				autocomplete="email"
				aria-describedby="email-error"
			/>
			<span id="email-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="subject" class="required">Subject:</label>
			<input
				type="text"
				id="subject"
				name="subject"
				required
				aria-required="true"
				placeholder="Enter message subject"
				aria-describedby="subject-error"
			/>
			<span id="subject-error" class="error-message" aria-live="polite"></span>
		</div>

		<div class="form-group">
			<label for="message" class="required">Message:</label>
			<textarea
				id="message"
				name="message"
				required
				aria-required="true"
				placeholder="Write your message here"
				aria-describedby="message-error"
				rows="5"></textarea>
			<span id="message-error" class="error-message" aria-live="polite"></span>
		</div>

		<button type="submit" aria-label="Send message" id="submit-button"
			>Send Email!</button
		>
	</form>
</section>

<style>
	.content-section {
		padding: clamp(1rem, 3vw, 2rem);
		max-width: 1400px;
		margin: 0 auto;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.page-h2 {
		font-size: clamp(1.5rem, 3vw, var(--font-large));
		font-family: var(--font-heading);
		margin: 0.5rem 0 1.5rem;
		text-decoration: underline;
		color: var(--text-color);
		text-align: center;
		width: 100%;
	}

	/* Styles for the form status message */
	.form-status {
		width: min(100%, 35rem);
		margin: 0 auto var(--spacing-md);
		padding: var(--spacing-sm) var(--spacing-md);
		border-radius: var(--radius-md);
		font-size: var(--font-medium);
		text-align: center;
		display: none;
		transition:
			opacity 0.3s ease,
			transform 0.3s ease;
	}

	.form-status.success {
		background-color: color-mix(
			in srgb,
			#57b846 20%,
			transparent
		); /* Light green */
		color: color-mix(in srgb, #14530d 90%, #fff); /* Dark green text */
		border: 1px solid #57b846;
		display: block;
	}

	.form-status.error {
		background-color: color-mix(
			in srgb,
			#e32b2b 15%,
			transparent
		); /* Light red */
		color: color-mix(in srgb, #901414 90%, #fff); /* Dark red text */
		border: 1px solid #e32b2b;
		display: block;
	}

	#contact-form {
		text-align: center;
		background: var(--background-color);
		color: var(--text-color);
		border: 1px solid color-mix(in srgb, var(--text-color) 20%, transparent);
		border-radius: var(--radius-lg);
		width: min(100%, 35rem);
		margin: 0 auto;
		padding: clamp(1.5rem, 4vw, 2.5rem);
		box-shadow: var(--shadow-md);
	}

	.form-main-title {
		font-size: clamp(1.25rem, 2.5vw, 1.5rem);
		font-weight: bold;
		text-align: center;
		margin-bottom: clamp(1.5rem, 4vw, 2rem);
		color: var(--text-color);
	}

	.form-group {
		margin-bottom: clamp(1.25rem, 3vw, 1.5rem);
		text-align: left;
	}

	.form-group label {
		display: block;
		margin-bottom: var(--spacing-sm);
		font-weight: 500;
		font-size: clamp(0.9rem, 2vw, 1rem);
		color: var(--text-color);
	}

	.required::after {
		content: "*";
		color: #e32;
		margin-left: var(--spacing-xs);
	}

	.form-group input,
	.form-group textarea {
		width: 100%;
		padding: clamp(0.75rem, 2vw, 1rem);
		border: 1px solid color-mix(in srgb, var(--text-color) 30%, transparent);
		border-radius: var(--radius-md);
		font-size: clamp(0.9rem, 2vw, 1rem);
		transition: all 0.3s ease;
		background-color: var(--background-color);
		color: var(--text-color);
	}
	.form-group input::placeholder,
	.form-group textarea::placeholder {
		color: color-mix(in srgb, var(--text-color) 60%, transparent);
		opacity: 1;
	}

	.form-group textarea {
		min-height: 120px;
		resize: vertical;
	}

	.form-group input:focus,
	.form-group textarea:focus {
		outline: none;
		border-color: var(--accent-color);
		box-shadow: 0 0 0 3px
			color-mix(in srgb, var(--accent-color) 30%, transparent);
	}

	.form-group input:hover,
	.form-group textarea:hover {
		border-color: var(--accent-color);
	}

	.error-message {
		display: block;
		color: #e32;
		font-size: clamp(0.75rem, 1.5vw, 0.875rem);
		margin-top: var(--spacing-xs);
		min-height: 1.25rem;
	}

	button[type="submit"] {
		width: min(100%, 16rem);
		height: clamp(3rem, 6vw, 3.5rem);
		border: none;
		border-radius: 999px;
		background: #57b846;
		font-weight: bold;
		font-size: clamp(0.9rem, 2vw, 1rem);
		color: #fff;
		display: flex;
		justify-content: center;
		align-items: center;
		margin: clamp(1.5rem, 4vw, 2rem) auto 0;
		padding: 0 clamp(1.5rem, 4vw, 2rem);
		cursor: pointer;
		transition: all 0.3s ease;
	}

	button[type="submit"]:hover {
		background: #4ca83d;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
	}

	button[type="submit"]:focus {
		outline: none;
		box-shadow: 0 0 0 3px rgba(87, 184, 70, 0.4);
	}

	button[type="submit"]:active {
		transform: translateY(1px);
	}

	button[type="submit"]:disabled {
		background: #ccc;
		cursor: not-allowed;
		transform: none;
		box-shadow: none;
	}

	@media (max-width: 480px) {
		.content-section {
			padding: 1rem 0.5rem;
		}

		#contact-form {
			border-radius: var(--radius-md);
			box-shadow: var(--shadow-sm);
		}

		.form-group input,
		.form-group textarea {
			font-size: 16px;
		}

		button[type="submit"] {
			width: 100%;
			margin-top: 1.5rem;
		}
	}

	@media (hover: none) {
		.form-group input:hover,
		.form-group textarea:hover {
			border-color: color-mix(in srgb, var(--text-color) 30%, transparent);
		}
	}

	@media (prefers-reduced-motion: reduce) {
		button[type="submit"],
		input,
		textarea {
			transition: none;
		}
	}
</style>

<script is:inline>
	document.addEventListener("DOMContentLoaded", () => {
		const form = document.getElementById("contact-form");
		if (!form || !(form instanceof HTMLFormElement)) return;

		const inputs = form.querySelectorAll("input[required], textarea[required]");
		const submitButton = document.getElementById("submit-button");
		const formStatusMessage = document.getElementById("form-status-message");

		inputs.forEach((input) => {
			const errorSpan = document.getElementById(`${input.id}-error`);
			if (!errorSpan) return;

			input.addEventListener("invalid", (event) => {
				event.preventDefault();
				if (!input.value.trim()) {
					errorSpan.textContent = "This field is required";
				} else if (
					input instanceof HTMLInputElement &&
					input.type === "email" &&
					!input.validity.valid
				) {
					errorSpan.textContent = "Please enter a valid email address";
				} else if (
					input instanceof HTMLInputElement &&
					input.minLength > 0 &&
					input.value.length < input.minLength
				) {
					errorSpan.textContent = `Must be at least ${input.minLength} characters`;
				}
				if (formStatusMessage) {
					formStatusMessage.textContent = "";
					formStatusMessage.className = "form-status";
				}
			});

			input.addEventListener("input", () => {
				if (input.validity.valid) {
					errorSpan.textContent = "";
				}
				if (formStatusMessage) {
					formStatusMessage.textContent = "";
					formStatusMessage.className = "form-status";
				}
			});
		});

		form.addEventListener("submit", async (event) => {
			event.preventDefault();

			if (formStatusMessage) {
				formStatusMessage.textContent = "";
				formStatusMessage.className = "form-status";
			}

			let isFormValid = true;
			inputs.forEach((input) => {
				if (!input.validity.valid) {
					isFormValid = false;
				}
			});

			if (!isFormValid) {
				if (formStatusMessage) {
					formStatusMessage.textContent = "Please correct the errors above.";
					formStatusMessage.className = "form-status error";
					formStatusMessage.style.display = "block";
				}
				return;
			}

			if (!submitButton || !(submitButton instanceof HTMLButtonElement)) return;

			submitButton.disabled = true;
			submitButton.textContent = "Sending...";

			try {
				const response = await fetch(form.action, {
					method: form.method,
					body: new FormData(form),
				});

				if (response.ok) {
					form.reset();
					inputs.forEach((input) => {
						const errorSpan = document.getElementById(`${input.id}-error`);
						if (errorSpan) errorSpan.textContent = "";
					});
					if (formStatusMessage) {
						formStatusMessage.textContent = "Message sent successfully!";
						formStatusMessage.className = "form-status success";
						formStatusMessage.style.display = "block";
					}
					formStatusMessage.focus(); // Focus for screen readers
					setTimeout(() => {
						if (
							formStatusMessage &&
							formStatusMessage.classList.contains("success")
						) {
							formStatusMessage.textContent = "";
							formStatusMessage.className = "form-status";
						}
					}, 5000); // Hide success message after 5 seconds
				} else {
					// Attempt to get error message from Netlify if available
					let errorMessage = "Failed to send message. Please try again.";
					try {
						const errorData = await response.json();
						if (errorData && errorData.message) {
							errorMessage = errorData.message;
						}
					} catch (e) {
						// Could not parse JSON, stick to default error
					}
					if (formStatusMessage) {
						formStatusMessage.textContent = errorMessage;
						formStatusMessage.className = "form-status error";
						formStatusMessage.style.display = "block";
					}
				}
			} catch (error) {
				if (formStatusMessage) {
					formStatusMessage.textContent =
						"An unexpected error occurred. Please try again.";
					formStatusMessage.className = "form-status error";
					formStatusMessage.style.display = "block";
				}
			} finally {
				submitButton.disabled = false;
				submitButton.textContent = "Send Email!";
			}
		});
	});
</script>
