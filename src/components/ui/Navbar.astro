---
import ThemeToggleButton from "../ui/ThemeToggleButton.tsx";
---

<header class="header">
  <nav class="nav-container" aria-label="Main navigation">
    <div class="nav-content">
      <div class="menu-icon-wrapper">
        <button
          id="menu-toggle-btn"
          class="menu-icon-button"
          aria-label="Toggle menu"
          aria-expanded="false"
          aria-controls="main-menu"
        >
          <svg
            class="open-icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 50 50"
            aria-hidden="true"
            fill="currentColor"
          >
            <title>Open menu icon</title>
            <path
              d="M 3 8 A 2.0002 2.0002 0 1 0 3 12 L 47 12 A 2.0002 2.0002 0 1 0 47 8 L 3 8 z M 3 23 A 2.0002 2.0002 0 1 0 3 27 L 47 27 A 2.0002 2.0002 0 1 0 47 23 L 3 23 z M 3 38 A 2.0002 2.0002 0 1 0 3 42 L 47 42 A 2.0002 2.0002 0 1 0 47 38 L 3 38 z"
            ></path>
          </svg>
        </button>
      </div>

      <a href="/" class="home-link desktop-home-link" aria-label="Home">
        <svg
          viewBox="0 0 32 32"
          xmlns="http://www.w.org/2000/svg"
          class="home-icon"
          aria-hidden="true"
        >
          <path
            fill="currentColor"
            d="M27 18.039L16 9.501 5 18.039V14.56l11-8.54 11 8.538v3.481zm-2.75-.31v8.251h-5.5v-5.5h-5.5v5.5h-5.5v-8.25L16 11.543l8.25 6.186z"
          ></path>
        </svg>
      </a>

      <div class="nav-spacer"></div>

      <div
        id="main-menu"
        class="nav-menu-styles"
        tabindex="-1"
        hidden
        inert
        data-open="false"
        role="dialog"
        aria-modal="true"
        aria-label="Main menu panel"
        transition:name="main-nav"
      >
        <div class="offcanvas-inner">
          <div class="panel-header">
            <a href="/" class="home-link" aria-label="Home">
              <svg
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
                class="home-icon"
                aria-hidden="true"
              >
                <path
                  fill="currentColor"
                  d="M27 18.039L16 9.501 5 18.039V14.56l11-8.54 11 8.538v3.481zm-2.75-.31v8.251h-5.5v-5.5h-5.5v5.5h-5.5v-8.25L16 11.543l8.25 6.186z"
                ></path>
              </svg>
            </a>
            <button
              id="menu-close-btn"
              class="menu-close-btn"
              type="button"
              aria-label="Close menu"
              title="Close menu"
            >
              <span class="menu-close-label" aria-hidden="true">Ã—</span>
            </button>
          </div>

          <ul class="nav-list">
            <li class="nav-item">
              <a href="/about" class="nav-link" aria-current={Astro.url.pathname === "/about" ? "page" : undefined}>
                About
              </a>
            </li>
            <li class="nav-item">
              <a href="/work" class="nav-link" aria-current={Astro.url.pathname === "/work" ? "page" : undefined}>
                Work
              </a>
            </li>
            <li class="nav-item">
              <a href="/blog" class="nav-link" aria-current={Astro.url.pathname.startsWith("/blog") ? "page" : undefined}>
                Blog
              </a>
            </li>
            <li class="nav-item">
              <a href="/contact" class="nav-link" aria-current={Astro.url.pathname === "/contact" ? "page" : undefined}>
                Contact
              </a>
            </li>
            <li class="nav-item md-hidden">
              <ThemeToggleButton client:idle transition:persist />
            </li>
          </ul>
        </div>
      </div>

      <div class="theme-toggle-container">
        <ThemeToggleButton client:idle transition:persist />
      </div>
    </div>
  </nav>

  <div id="menu-backdrop" class="menu-backdrop" hidden aria-hidden="true"></div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // --- 1. Get all required elements ---
    const mainMenu = document.getElementById("main-menu");
    const menuToggleBtn = document.getElementById("menu-toggle-btn");
    const backdrop = document.getElementById("menu-backdrop");
    const menuCloseBtn = document.getElementById("menu-close-btn");

    // --- 2. Check if all elements exist before proceeding ---
    if (mainMenu && menuToggleBtn && backdrop && menuCloseBtn) {
      // --- 3. All logic is now safely scoped inside this block ---
      
      const btn = menuToggleBtn;
      const menu = mainMenu;
      const back = backdrop;
      const closeBtn = menuCloseBtn;
      const firstFocusable = 'a, button, [tabindex]:not([tabindex="-1"])';

      let isAnimating = false;
      let openFallbackTimer: number | undefined;
      let closeFallbackTimer: number | undefined;

      function cleanupAfterClose() {
        menu.setAttribute("hidden", "");
        menu.setAttribute("data-open", "false");
        menu.inert = true;
        menu.classList.remove("is-closing");
        back.setAttribute("hidden", "");
        document.body.style.overflow = "";
        isAnimating = false;
        window.clearTimeout(closeFallbackTimer);
      }

      function onDocumentKeydown(e: KeyboardEvent) {
        if (e.key === "Escape" || e.key === "Esc") {
          if (btn.getAttribute("aria-expanded") === "true") {
            e.preventDefault();
            closeMenu();
          }
        }
      }

      function onMenuTransitionEnd(e: TransitionEvent) {
        if (e.target !== menu) return;
        isAnimating = false;
        window.clearTimeout(openFallbackTimer);
        menu.removeEventListener("transitionend", onMenuTransitionEnd);
      }

      function openMenu() {
        if (isAnimating) return;
        isAnimating = true;
        btn.setAttribute("aria-expanded", "true");
        menu.removeAttribute("hidden");
        menu.inert = false;
        menu.setAttribute("data-open", "true");
        back.removeAttribute("hidden");
        back.classList.add("visible");
        document.body.style.overflow = "hidden";
        
        requestAnimationFrame(() => {
          void menu.offsetWidth; // Trigger reflow for transition
          menu.classList.add("is-open");
          const first = menu.querySelector<HTMLElement>(firstFocusable);
          if (first) first.focus();
          document.addEventListener("keydown", onDocumentKeydown);
          menu.addEventListener("transitionend", onMenuTransitionEnd);
        });

        openFallbackTimer = window.setTimeout(() => {
          if (isAnimating) {
            isAnimating = false;
            menu.removeEventListener("transitionend", onMenuTransitionEnd);
          }
        }, 600);
      }

      function closeMenu(returnFocus = true) {
        if (isAnimating) return;
        isAnimating = true;
        btn.setAttribute("aria-expanded", "false");
        menu.classList.remove("is-open");
        menu.classList.add("is-closing");
        back.classList.remove("visible");

        function onEnd(e: TransitionEvent) {
          if (e.target !== menu) return;
          cleanupAfterClose();
          menu.removeEventListener("transitionend", onEnd);
        }

        menu.addEventListener("transitionend", onEnd);

        closeFallbackTimer = window.setTimeout(() => {
          if (isAnimating) {
            cleanupAfterClose();
            menu.removeEventListener("transitionend", onEnd);
          }
        }, 600);

        document.removeEventListener("keydown", onDocumentKeydown);
        if (returnFocus) btn.focus();
      }

      function toggleMenu() {
        const isExpanded = btn.getAttribute("aria-expanded") === "true";
        if (isExpanded) closeMenu();
        else openMenu();
      }

      const desktopBreakpoint = 768;
      function setDesktopNavState() {
        const isDesktop = window.innerWidth >= desktopBreakpoint;
        const isMenuOpen = menu.getAttribute("data-open") === "true";

        if (isDesktop) {
          menu.inert = false;
          if (isMenuOpen) {
            closeMenu(false);
            document.body.style.overflow = "";
            back.setAttribute("hidden", "");
          }
        } else {
          menu.inert = !isMenuOpen;
        }
      }

      // --- Attach all event listeners ---
      btn.addEventListener("click", toggleMenu);
      closeBtn.addEventListener("click", () => closeMenu());
      back.addEventListener("click", () => closeMenu());
      menu.addEventListener("click", (e) => {
        if (e.target instanceof HTMLElement) {
          if (e.target.closest("a, button")) {
            closeMenu();
          }
        }
      });
      
      // --- Initial setup and resize listener ---
      setDesktopNavState();
      window.addEventListener("resize", setDesktopNavState);

    } else {
      console.error(
        "One or more required navigation elements were not found."
      );
    }
  });
</script>