---
import ThemeToggleButton from "../ui/ThemeToggleButton.tsx";
---
<header class="header">
	<nav class="nav-container" aria-label="Main navigation">
		<div class="nav-content">
			<a href="/" class="home-link" aria-label="Home">
				<svg
					viewBox="0 0 32 32"
					xmlns="http://www.w3.org/2000/svg"
					class="home-icon"
					aria-hidden="true"
				>
					<path
						fill="currentColor"
						d="M27 18.039L16 9.501 5 18.039V14.56l11-8.54 11 8.538v3.481zm-2.75-.31v8.251h-5.5v-5.5h-5.5v5.5h-5.5v-8.25L16 11.543l8.25 6.186z"
					></path>
				</svg>
			</a>

			<div class="menu-icon-wrapper">
				<button
					id="menu-toggle-btn"
					class="menu-icon-button"
					aria-label="Toggle menu"
					aria-expanded="false"
					aria-controls="main-menu"
				>
					<svg
						class="open-icon"
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 50 50"
						aria-hidden="true"
						fill="currentColor"
					>
						<title>Open menu icon</title>
						<path
							d="M 3 8 A 2.0002 2.0002 0 1 0 3 12 L 47 12 A 2.0002 2.0002 0 1 0 47 8 L 3 8 z M 3 23 A 2.0002 2.0002 0 1 0 3 27 L 47 27 A 2.0002 2.0002 0 1 0 47 23 L 3 23 z M 3 38 A 2.0002 2.0002 0 1 0 3 42 L 47 42 A 2.0002 2.0002 0 1 0 47 38 L 3 38 z"
						></path>
					</svg>
					<svg
						class="close-icon"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="2.5"
						stroke="currentColor"
						aria-hidden="true"
					>
						<title>Close menu icon</title>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>

			<div id="main-menu" class="nav-menu-styles" hidden inert data-open="false">
				<ul class="nav-list">
					<li class="nav-item">
						<a
							href="/about"
							class="nav-link"
							aria-current={Astro.url.pathname === "/about" ? "page" : undefined}
						>
							About
						</a>
					</li>
					<li class="nav-item">
						<a
							href="/work"
							class="nav-link"
							aria-current={Astro.url.pathname === "/work" ? "page" : undefined}
						>
							Work
						</a>
					</li>
					<li class="nav-item">
						<a
							href="/blog"
							class="nav-link"
							aria-current={Astro.url.pathname.startsWith("/blog") ? "page" : undefined}
						>
							Blog
						</a>
					</li>
					<li class="nav-item">
						<a
							href="/contact"
							class="nav-link"
							aria-current={Astro.url.pathname === "/contact" ? "page" : undefined}
						>
							Contact
						</a>
					</li>
					<li class="nav-item md:hidden">
						<ThemeToggleButton client:idle transition:persist />
					</li>
				</ul>
			</div>
			<div class="theme-toggle-container">
				<ThemeToggleButton client:idle transition:persist />
			</div>
		</div>
	</nav>
</header>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const menuToggleBtn = document.getElementById("menu-toggle-btn");
		const mainMenu = document.getElementById("main-menu");
		// Early exit if critical elements missing
		if (!menuToggleBtn || !mainMenu) return;

		const btn = menuToggleBtn;
		const menu = mainMenu;
		const firstFocusable = 'a, button, [tabindex]:not([tabindex="-1"])';

		// Helpers: open / close / toggle menu, and key handling.
		function openMenu() {
			btn.setAttribute("aria-expanded", "true");
			btn.classList.add("is-open");
			menu.removeAttribute("hidden");
			// Guarded inert access (some browsers support it)
			if ("inert" in menu) (menu as any).inert = false;
			menu.setAttribute("data-open", "true");
			const first = menu.querySelector(firstFocusable);
			if (first && typeof (first as HTMLElement).focus === "function") (first as HTMLElement).focus();
			document.addEventListener("keydown", onDocumentKeydown);
		}

		function closeMenu(returnFocus = true) {
			btn.setAttribute("aria-expanded", "false");
			btn.classList.remove("is-open");
			if ("inert" in menu) (menu as any).inert = true;
			menu.setAttribute("hidden", "");
			menu.setAttribute("data-open", "false");
			if (returnFocus) btn.focus();
			document.removeEventListener("keydown", onDocumentKeydown);
		}

		function toggleMenu() {
			const isExpanded = btn.getAttribute("aria-expanded") === "true";
			if (isExpanded) closeMenu();
			else openMenu();
		}

		function onDocumentKeydown(e: KeyboardEvent) {
			if (e.key === "Escape" || e.key === "Esc") {
				if (btn.getAttribute("aria-expanded") === "true") {
					e.preventDefault();
					closeMenu();
				}
			}
		}

		btn.addEventListener("click", toggleMenu);

		// Close menu when a link inside is activated.
		menu.addEventListener("click", (e) => {
			const target = e.target;
			if (target && target instanceof HTMLElement) {
				const link = target.closest("a,button");
				if (link) closeMenu();
			}
		});

		// Initial desktop visibility: if viewport is wide, let CSS control visibility
		if (typeof window !== "undefined" && window.innerWidth >= 768) {
			menu.removeAttribute("hidden");
			if ("inert" in menu) (menu as any).inert = false;
			menu.setAttribute("data-open", "false");
		}
	});
</script>
