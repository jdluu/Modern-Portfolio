---
import type { ExperienceCard } from "../../types/experience-card";
import {
  parseSafeDate,
  resolveAssetUrl,
  sanitizeStringForUI,
  formatMonthYear,
} from "../../lib/utils";

export interface Props {
  item: ExperienceCard;
}

const { item } = Astro.props as Props;

// Minimal, type-driven extraction — flattened ExperienceCard exposes metadata fields at top-level
const {
  title,
  slug,
  company = "",
  startDate,
  endDate,
  date,
  thumbnail,
  summary = "",
} = item;

const startDateStr = startDate ?? undefined;
const endDateStr = endDate ?? undefined;
const thumbnailSrc = thumbnail ?? undefined;
const summaryRaw = summary ?? "";

// Ensure client links use extensionless, lowercase slugs to match getStaticPaths()
const safeSlug = String(slug ?? "").replace(/\.(md|mdx)$/, "");

// Parse dates (helpers handle invalid values)
const startDateObj = parseSafeDate(startDateStr);
const endDateObj = parseSafeDate(endDateStr);

// Resolve thumbnail once
const safeThumbnail = resolveAssetUrl(thumbnailSrc) ?? "";

// Compute display date with sentinel handling
const explicitDate = date ?? "";
let dateDisplay = explicitDate;

if (!dateDisplay) {
  if (startDateObj && endDateObj) {
    const isEndSentinel = endDateObj.getFullYear() >= 9999;
    dateDisplay = isEndSentinel
      ? `${formatMonthYear(startDateObj)} — Present`
      : `${formatMonthYear(startDateObj)} — ${formatMonthYear(endDateObj)}`;
  } else if (startDateObj && !endDateObj) {
    dateDisplay = `${formatMonthYear(startDateObj)} — Present`;
  } else {
    dateDisplay = "";
  }
}

// Compose title + company display and image alt
const titleCompany = company ? `${title} @ ${company}` : title;
const imgAlt = company ? `${title} @ ${company}` : title;

// Sanitized summary for UI
const safeSummary = sanitizeStringForUI(summaryRaw);
const safeDateDisplay = dateDisplay ?? "";
---
<section class="experience-card background">
  {safeThumbnail ? (
    <img
      src={safeThumbnail}
      alt={imgAlt}
      class="experience-image"
      loading="lazy"
      decoding="async"
      width="600"
      height="400"
    />
  ) : (
    <div class="experience-image placeholder" aria-hidden="true"></div>
  )}
  <div class="project-container">
    <section class="more-info" aria-hidden={false}>
      <span class="project-title">{titleCompany}</span>

      {safeDateDisplay ? (
        <span class="project-date">{safeDateDisplay}</span>
      ) : <span class="project-date empty" aria-hidden="true"></span>}

      {safeSummary ? (
        <p class="project-description">{safeSummary}</p>
      ) : (
        <p class="project-description" aria-hidden="true"></p>
      )}
    </section>
    <a class="learn-more" href={`/experiences/${safeSlug}`}>Learn More</a>
  </div>
</section>


