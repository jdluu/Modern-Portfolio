---
import type { ExperienceCardItem } from "../../types/experience-card";
import {
  parseSafeDate,
  resolveAssetUrl,
  sanitizeStringForUI,
  formatMonthYear,
} from "../../lib/utils";

export interface Props {
  item: ExperienceCardItem;
}

const { item } = Astro.props as Props;

// Minimal, type-driven extraction — metadata matches Tina schema for experiencecard.metadata
const { title, slug, metadata = {} } = item;
const company = metadata.company ?? "";
const startDateStr = metadata.startDate ?? undefined;
const endDateStr = metadata.endDate ?? undefined;
const thumbnailSrc = metadata.thumbnail ?? undefined;
const summaryRaw = metadata.summary ?? "";

// Ensure client links use extensionless, lowercase slugs to match getStaticPaths()
const safeSlug = String(slug ?? "").replace(/\.(md|mdx)$/, "").toLowerCase();

// Parse dates (helpers handle invalid values)
const startDateObj = parseSafeDate(startDateStr);
const endDateObj = parseSafeDate(endDateStr);

// Resolve thumbnail once
const safeThumbnail = resolveAssetUrl(thumbnailSrc) ?? "";

// Compute display date with sentinel handling
const explicitDate = metadata.date ?? "";
let dateDisplay = explicitDate;

if (!dateDisplay) {
  if (startDateObj && endDateObj) {
    const isEndSentinel = endDateObj.getFullYear() >= 9999;
    dateDisplay = isEndSentinel
      ? `${formatMonthYear(startDateObj)} — Present`
      : `${formatMonthYear(startDateObj)} — ${formatMonthYear(endDateObj)}`;
  } else if (startDateObj && !endDateObj) {
    dateDisplay = `${formatMonthYear(startDateObj)} — Present`;
  } else {
    dateDisplay = "";
  }
}

// Compose title + company display and image alt
const titleCompany = company ? `${title} @ ${company}` : title;
const imgAlt = company ? `${title} @ ${company}` : title;

// Sanitized summary for UI
const safeSummary = sanitizeStringForUI(summaryRaw);
const safeDateDisplay = dateDisplay ?? "";
---
<section class="background">
  {safeThumbnail ? (
    <img
      src={safeThumbnail}
      alt={imgAlt}
      class="experience-image"
      loading="lazy"
      decoding="async"
      width="600"
      height="400"
    />
  ) : (
    <div class="experience-image placeholder" aria-hidden="true"></div>
  )}
  <div class="project-container">
    <section class="more-info" aria-hidden={false}>
      <span class="project-title">{titleCompany}</span>

      {safeDateDisplay ? (
        <span class="project-date">{safeDateDisplay}</span>
      ) : <span class="project-date empty" aria-hidden="true"></span>}

      {safeSummary ? (
        <p class="project-description">{safeSummary}</p>
      ) : (
        <p class="project-description" aria-hidden="true"></p>
      )}
    </section>
    <a class="learn-more" href={`/experiences/${safeSlug}`}>Learn More</a>
  </div>
</section>

<style>
  /* Container (card) */
  .background {
    display: block;
    position: relative;
    border: 1px solid var(--m3-color-outline);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    width: 100%;
    height: 30rem;
    border-radius: 24px;
    overflow: hidden;
    box-sizing: border-box;
  }

  /* Image area */
  .experience-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    background-color: var(--m3-color-surface-variant);
    padding: 0.5rem;
    box-sizing: border-box;
  }
  .experience-image.placeholder {
    background-color: var(--m3-color-surface-variant);
  }

  /* Hover / interaction */
  .background:hover {
    border-color: var(--m3-color-primary);
    transform: scale(1.02);
  }
  .background:hover .project-container {
    opacity: 1;
  }

  /* Overlay */
  .project-container {
    background: var(--m3-color-surface-variant);
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: opacity 0.4s ease-in-out;
  }

  /* Text */
  .more-info {
    text-align: center;
    padding: 1.6rem;
    max-width: 46rem;
  }
  .project-title {
    font-size: var(--m3-font-title-large);
    font-family: var(--m3-font-family-display);
    font-weight: 600;
    margin-bottom: 0.8rem;
    color: var(--m3-color-on-surface-variant);
  }
  .project-date {
    font-size: var(--m3-font-label-medium);
    font-family: var(--m3-font-family-body);
    color: var(--m3-color-on-surface-variant);
    margin-bottom: 1.2rem;
    display: block;
  }
  .project-date.empty {
    margin-bottom: 1.2rem;
    height: 0;
  }
  .project-description {
    font-size: var(--m3-font-body-large);
    font-family: var(--m3-font-family-body);
    margin-bottom: 1.6rem;
    color: var(--m3-color-on-surface-variant);
  }

  /* Link */
  .learn-more {
    font-size: var(--m3-font-label-large);
    font-family: var(--m3-font-family-body);
    text-decoration: none;
    color: var(--m3-color-primary);
    font-weight: 500;
  }
  .learn-more:hover,
  .learn-more:focus {
    text-decoration: underline;
    opacity: 0.9;
  }
</style>

