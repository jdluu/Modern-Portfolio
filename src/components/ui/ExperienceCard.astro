---
export interface Props {
  title: string;
  slug: string;
  description?: string;
  date?: string;
  thumbnail?: string;
  company?: string;
  startDate?: string;
  endDate?: string;
  summary?: string;

  // Optional nested metadata object (from Tina)
  metadata?: {
    company?: string;
    date?: string;
    startDate?: string;
    endDate?: string;
    thumbnail?: string;
    summary?: string;
  };
}

const {
  // Inputs / Props (with defaults where appropriate)
  title,
  slug,
  description = "",
  date: flatDate = "",
  thumbnail: flatThumbnail = "",
  company: flatCompany,
  startDate: flatStart,
  endDate: flatEnd,
  summary: flatSummary,
  metadata = undefined,
} = Astro.props as Props;

/* Helpers */

// Safe parse ISO-ish strings to Date; returns undefined for invalid values.
function parseSafeDate(value?: string): Date | undefined {
  if (!value || typeof value !== "string") return undefined;
  const d = new Date(value);
  if (Number.isNaN(d.getTime())) return undefined;
  return d;
}

/**
 * Defensive: strip YAML frontmatter from a raw string and return the body.
 * Kept local to the component to avoid cross-module hoisting issues when
 * components are used with mixed data sources in DEV (Tina + filesystem).
 */
const stripFrontmatterLocal = (raw?: unknown): string => {
  const s = typeof raw === "string" ? raw : "";
  if (!s) return "";
  const m = s.match(/^---\r?\n[\s\S]*?\r?\n---\r?\n?/);
  return m ? s.slice(m[0].length) : s;
};

/**
 * Defensive: sanitize small metadata strings used for UI display.
 * - Strips YAML frontmatter if present
 * - Trims and collapses excessive whitespace
 * - Returns empty string when input is falsy
 */
function sanitizeStringForUI(value?: unknown): string {
  const raw = stripFrontmatterLocal(value);
  return raw.replace(/\s+/g, " ").trim();
}

// Format a Date as "Mon yyyy" using Intl when available; light fallback otherwise.
function formatMonthYear(d: Date): string {
  try {
    return new Intl.DateTimeFormat(undefined, { month: "short", year: "numeric" }).format(d);
  } catch {
    const months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    return `${months[d.getMonth()]} ${d.getFullYear()}`;
  }
}

/* Derived fields (priority rules preserved) */

// company priority: explicit prop > metadata.company > ""
const company = (flatCompany ?? metadata?.company ?? "") as string;

// start/end raw values (prop priority preserved)
const startRaw = flatStart ?? metadata?.startDate;
const endRaw = flatEnd ?? metadata?.endDate;

// parsed date objects (safe)
const startDateObj = parseSafeDate(startRaw);
const endDateObj = parseSafeDate(endRaw);

// thumbnail priority: prop > metadata > ""
const thumbnail = (flatThumbnail ?? metadata?.thumbnail ?? "") as string;

// summary priority: prop > metadata > description > ""
const summary = (flatSummary ?? metadata?.summary ?? description ?? "") as string;

// explicit date priority: flattened date prop > metadata.date > ""
const explicitDate = flatDate || metadata?.date || "";

// compute the dateDisplay following original sentinel behavior (9999 => Present)
let dateDisplay = explicitDate;

if (!dateDisplay) {
  if (startDateObj && endDateObj) {
    const isEndSentinel = endDateObj.getFullYear() >= 9999;
    dateDisplay = isEndSentinel
      ? `${formatMonthYear(startDateObj)} — Present`
      : `${formatMonthYear(startDateObj)} — ${formatMonthYear(endDateObj)}`;
  } else if (startDateObj && !endDateObj) {
    dateDisplay = `${formatMonthYear(startDateObj)} — Present`;
  } else {
    dateDisplay = "";
  }
}

// Compose title + company display and image alt without changing semantics
const titleCompany = company ? `${title} @ ${company}` : title;
const imgAlt = company ? `${title} @ ${company}` : title;

// Safe fallbacks to avoid rendering undefined
const safeThumbnail = thumbnail ?? "";
const safeDateDisplay = dateDisplay ?? "";
// Ensure the summary used in the UI is sanitized and never undefined
const safeSummary = sanitizeStringForUI(summary);
---
<section class="background">
  {safeThumbnail ? (
    <img
      src={safeThumbnail}
      alt={imgAlt}
      class="experience-image"
      loading="lazy"
      decoding="async"
      width="600"
      height="400"
    />
  ) : (
    <div class="experience-image placeholder" aria-hidden="true"></div>
  )}
  <div class="project-container">
    <section class="more-info" aria-hidden={false}>
      <span class="project-title">{titleCompany}</span>

      {safeDateDisplay ? (
        <span class="project-date">{safeDateDisplay}</span>
      ) : <span class="project-date empty" aria-hidden="true"></span>}

      {safeSummary ? (
        <p class="project-description">{safeSummary}</p>
      ) : (
        <p class="project-description" aria-hidden="true"></p>
      )}
    </section>
    <a class="learn-more" href={`/experiences/${slug}`}>Learn More</a>
  </div>
</section>

<style>
  /* Container (card) */
  .background {
    display: block;
    position: relative;
    border: 1px solid var(--m3-color-outline);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    width: 100%;
    height: 30rem;
    border-radius: 24px;
    overflow: hidden;
    box-sizing: border-box;
  }

  /* Image area */
  .experience-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    background-color: var(--m3-color-surface-variant);
    padding: 0.5rem;
    box-sizing: border-box;
  }
  .experience-image.placeholder {
    background-color: var(--m3-color-surface-variant);
  }

  /* Hover / interaction */
  .background:hover {
    border-color: var(--m3-color-primary);
    transform: scale(1.02);
  }
  .background:hover .project-container {
    opacity: 1;
  }

  /* Overlay */
  .project-container {
    background: var(--m3-color-surface-variant);
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: opacity 0.4s ease-in-out;
  }

  /* Text */
  .more-info {
    text-align: center;
    padding: 1.6rem;
    max-width: 46rem;
  }
  .project-title {
    font-size: var(--m3-font-title-large);
    font-family: var(--m3-font-family-display);
    font-weight: 600;
    margin-bottom: 0.8rem;
    color: var(--m3-color-on-surface-variant);
  }
  .project-date {
    font-size: var(--m3-font-label-medium);
    font-family: var(--m3-font-family-body);
    color: var(--m3-color-on-surface-variant);
    margin-bottom: 1.2rem;
    display: block;
  }
  .project-date.empty {
    margin-bottom: 1.2rem;
    height: 0;
  }
  .project-description {
    font-size: var(--m3-font-body-large);
    font-family: var(--m3-font-family-body);
    margin-bottom: 1.6rem;
    color: var(--m3-color-on-surface-variant);
  }

  /* Link */
  .learn-more {
    font-size: var(--m3-font-label-large);
    font-family: var(--m3-font-family-body);
    text-decoration: none;
    color: var(--m3-color-primary);
    font-weight: 500;
  }
  .learn-more:hover,
  .learn-more:focus {
    text-decoration: underline;
    opacity: 0.9;
  }
</style>
