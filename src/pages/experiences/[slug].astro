---
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { Experience } from "../../types/experience";
import { fetchExperiences } from "../../lib/tina";
import { resolveAssetUrl, pickImageString, sanitizeStringForUI } from "../../lib/utils";

/*
  Data loading: getStaticPaths
  - Uses shared fetchExperiences helper
  - No DEV filesystem fallback here (per refactor requirements)
*/
export async function getStaticPaths() {
  const exps = await fetchExperiences({ first: 500 });
  const paths = exps
    .filter((exp: any) => !exp?.draft)
    .map((exp: any) => {
      const filename = exp._sys?.filename ?? "";
      const slug = String(filename).replace(/\.mdx?$/i, "").toLowerCase();
      return {
        params: { slug },
        props: { experience: exp },
      };
    })
    .filter((p: any) => !!p.params?.slug);
  return paths;
}

// Props / derived values (receive a full Experience object)
const { experience } = Astro.props as { experience: Experience };

// Derived and resilient values
const title = experience?.title ?? "Untitled";
const companyName = experience?.company?.name ?? "Company Name Not Available";
// Extract a string candidate from Tina image field and resolve with shared helper
const companyLogo = resolveAssetUrl(pickImageString(experience?.company?.image)) ?? "/placeholder-logo.png";
const role = experience?.logistics?.role ?? "Role Not Specified";
const duration = experience?.logistics?.duration ?? "Duration Not Specified";
// Sanitize tools/skills before splitting/rendering
const tools = sanitizeStringForUI(experience?.technologies?.tools) || "N/A";
const skills = sanitizeStringForUI(experience?.technologies?.skills) || "N/A";
const responsibilities = Array.isArray(experience?.work?.responsibilities)
  ? (experience.work!.responsibilities!.filter((r) => r?.duties) as { duties?: string }[])
  : [];
const achievements = Array.isArray(experience?.work?.achievements)
  ? (experience.work!.achievements!.filter((a) => a?.points) as { points?: string }[])
  : [];
const showcase = experience?.showcase && experience.showcase.link && experience.showcase.description ? [experience.showcase] : [];
---

<BaseLayout title={title}>
    <main class="experience-page-container">
        <article class="experience-page-div">
            <!-- Main Content Column -->
            <div class="main-content">
                <section id="overview" aria-labelledby="experience-title">
                    <div class="experience-header">
                        <div class="company-info" role="banner">
                            <img
                                src={companyLogo}
                                alt={`${companyName} logo`}
                                class="company-logo"
                                width="80"
                                height="80"
                                loading="lazy"
                                decoding="async"
                                aria-hidden="true"
                            />
                            <div class="title-container">
                                <h1 id="experience-title" class="experience-title" tabindex="-1">{title}</h1>
                                <p class="company-name"><strong>{companyName}</strong></p>
                            </div>
                        </div>
                    </div>
                </section>

                <section id="responsibilities" aria-labelledby="responsibilities-title">
                    <h2 id="responsibilities-title" tabindex="-1">Key Responsibilities</h2>
                    {responsibilities.length > 0 ? (
                        <ul class="responsibilities-list" role="list">
                            {responsibilities.map((item, index) => (
                                <li aria-label={`Responsibility ${index + 1}`}><span class="highlight">{item.duties}</span></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No responsibilities available.</p>
                    )}
                </section>

                <section id="achievements" aria-labelledby="achievements-title">
                    <h2 id="achievements-title" tabindex="-1">Notable Achievements</h2>
                    {achievements.length > 0 ? (
                        <ul class="achievements-list" role="list">
                            {achievements.map((item, index) => (
                                <li aria-label={`Achievement ${index + 1}`}><strong>{item.points}</strong></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No achievements available.</p>
                    )}
                </section>
            </div>

            <!-- Sidebar Column -->
            <aside class="sidebar-content" aria-label="Experience details">
                <div class="sidebar-card">
                    <h3 id="logistics-title">Logistics</h3>
                    <div class="experience-meta">
                        <div class="meta-item">
                            <span class="meta-label" id="role-label">Role</span>
                            <span class="meta-value" aria-labelledby="role-label"><strong>{role}</strong></span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label" id="duration-label">Duration</span>
                            <span class="meta-value" aria-labelledby="duration-label"><strong>{duration}</strong></span>
                        </div>
                    </div>
                </div>
                <div class="sidebar-card">
                    <h3 id="tech-title">Technology Stack</h3>
                    <div class="tech-section">
                        <div class="tech-item">
                            <h4 id="tools-title">Tools & Technologies</h4>
                            <div class="tech-text" aria-labelledby="tools-title">
                              {(tools || 'N/A').split(',').map(t => t.trim()).filter(Boolean).join(', ')}
                            </div>
                        </div>
                        <div class="tech-item">
                            <h4 id="skills-title">Skills</h4>
                            <div class="tech-text" aria-labelledby="skills-title">
                              {(skills || 'N/A').split(',').map(s => s.trim()).filter(Boolean).join(', ')}
                            </div>
                        </div>
                    </div>
                </div>
                {showcase.length > 0 && (
                    <div class="sidebar-card">
                        <section id="showcase" aria-labelledby="showcase-title">
                            <h3 id="showcase-title" tabindex="-1">Project Showcase</h3>
                            <div class="showcase-grid">
                                {showcase.map((item) => (
                                    <a href={item.link}
                                       class="showcase-item"
                                       target="_blank"
                                       rel="noopener noreferrer"
                                       aria-label={`View project: ${item.description}`}>
                                        <p><strong>{item.description}</strong></p>
                                        <span class="showcase-link">View Project <span class="sr-only">opens in new tab</span>â†’</span>
                                    </a>
                                ))}
                            </div>
                        </section>
                    </div>
                )}
            </aside>
        </article>
    </main>
</BaseLayout>

<style>
/* Purple accent color for both themes */
    :root {
        --purple-accent: var(--m3-color-secondary); /* Dark purple for light theme */
    }
    [data-theme="dark"] {
        --purple-accent: var(--m3-color-primary); /* Light violet for dark theme */
    }
    /* Layout & Container Styles */
    .experience-page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--spacing-lg);
    }

    .experience-page-div {
        display: grid;
        grid-template-columns: minmax(0, 2.2fr) minmax(280px, 1fr);
        gap: var(--spacing-xl);
        align-items: start;
    }

    .main-content {
        max-width: 80ch; /* Optimal line-length for reading */
    }

    /* Header Styles */
    .experience-header {
        margin-bottom: var(--spacing-lg);
        padding-bottom: var(--spacing-md);
        border-bottom: none;
    }

    .company-info {
        display: flex;
        align-items: flex-start;
        gap: clamp(1.5rem, 3vw, var(--spacing-lg));
        margin-bottom: var(--spacing-lg);
    }

    .company-logo {
        width: 80px;
        height: 80px;
        object-fit: contain;
        border-radius: 8px;
        background: white;
        padding: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,.06);
        flex-shrink: 0;
    }

    .title-container {
        flex: 1;
        min-width: 0;
    }

    .experience-title {
        font-size: clamp(1.75rem, 5vw, 2.5rem);
        margin: 0;
        color: var(--text-color);
        line-height: 1.2;
        word-wrap: break-word;
        font-family: var(--font-heading);
        font-weight: 700;
    }

    .company-name {
        font-size: clamp(1.25rem, 3vw, 1.5rem);
        color: var(--text-color);
        margin: 0.5rem 0;
        word-wrap: break-word;
    }

    /* Sidebar Styles */
    .sidebar-card {
        background: var(--m3-color-surface-variant);
        padding: var(--spacing-lg);
        border-radius: 12px;
        margin-bottom: var(--spacing-lg);
    }

    .experience-meta {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
        align-items: flex-start;
    }

    .meta-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .meta-label {
        font-size: clamp(1.05rem, 0.8vw, 1.2rem);
        color: var(--text-color);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: 700;
    }

    .meta-value {
        color: var(--text-color);
        line-height: 1.5;
        font-size: clamp(1.15rem, 0.9vw, 1.4rem);
    }

    /* Section Content */
    .section-content {
        font-size: clamp(1rem, 2.5vw, 1.2rem);
        line-height: 1.6;
        color: var(--text-color);
        margin: var(--spacing-lg) 0;
    }

    .tech-section {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }

    .tech-item h4 {
        font-size: clamp(1.25rem, 1.1vw, 1.6rem);
        margin-bottom: var(--spacing-sm);
        color: var(--text-color);
        font-family: var(--font-heading);
    }

    .tech-item p {
        color: var(--text-color);
        line-height: 1.6;
        word-wrap: break-word;
        font-size: clamp(1.15rem, 0.9vw, 1.35rem);
    }

    /* Text-based styles for tools and skills lists */
    .tech-text {
        color: var(--text-color);
        line-height: 1.7;
        word-wrap: break-word;
        font-size: clamp(1.15rem, 0.9vw, 1.35rem);
    }

    /* Lists Styles */
    .responsibilities-list,
    .achievements-list {
        list-style: none;
        padding: 0;
        margin: var(--spacing-md) 0;
    }

    .responsibilities-list li,
    .achievements-list li {
        position: relative;
        padding-left: 1.5em;
        margin-bottom: var(--spacing-md);
        font-size: var(--m3-font-body-large); /* 1.6rem */
        line-height: 1.7;
        color: var(--text-color);
    }

    .responsibilities-list li::before {
        content: "â€¢";
        position: absolute;
        left: 0;
        color: var(--accent-color);
    }

    .achievements-list li::before {
        content: "â˜…";
        position: absolute;
        left: 0;
        color: var(--accent-color);
    }

    /* Section Titles */
    .main-content h2 {
        padding-top: var(--spacing-lg);
        border-top: 1px dashed color-mix(in oklab, var(--m3-color-outline) 40%, transparent);
        font-size: var(--m3-font-headline-small); /* 2.4rem */
        color: var(--text-color);
        margin: var(--spacing-xl) 0 var(--spacing-md);
        font-family: var(--font-heading);
        font-weight: 600;
    }

    .sidebar-card h3 {
        font-size: clamp(1.6rem, 1.4vw, 2.1rem);
        margin-bottom: var(--spacing-md);
    }

    /* Responsive Styles */
/* Sidebar sticky + TOC */
.sidebar-content {
  position: sticky;
  top: calc(var(--nav-height) + var(--spacing-md));
  align-self: start;
}
/* Chip hover/focus states */
.chip:hover,
.chip:focus-visible {
  background: var(--m3-color-primary);
  color: var(--m3-color-on-primary);
  border-color: var(--m3-color-primary);
}
    @media (max-width: 992px) {
        .experience-page-div {
            grid-template-columns: 1fr; /* Stack columns */
        }
    
        .sidebar-content {
            grid-row: 2;
        }
    }

    @media (max-width: 768px) {
        .experience-page-container {
            padding: var(--spacing-md);
        }

        .company-info {
            gap: var(--spacing-md);
        }
    }

    @media (max-width: 480px) {
        .experience-page-container {
            padding: var(--spacing-sm);
        }

/* Sidebar sticky */
    .sidebar-content {
      position: sticky;
      top: calc(var(--nav-height) + var(--spacing-md));
      align-self: start;
    }
    /* Chips */
    .chip-row {
      display: flex;
      flex-wrap: wrap;
      gap: var(--spacing-sm);
    }
    .chip {
      display: inline-flex;
      align-items: center;
      padding: 6px 10px;
      border-radius: 999px;
      font-size: var(--m3-font-label-medium);
      background: color-mix(in oklab, var(--m3-color-primary) 10%, var(--m3-color-surface-variant));
      color: var(--m3-color-on-surface);
      border: 1px solid color-mix(in oklab, var(--m3-color-primary) 25%, transparent);
    }
    /* Print styles (resume-friendly) */
    @media print {
      .sidebar-content { position: static !important; }
      .toc, nav, header, footer { display: none !important; }
      .sidebar-card { break-inside: avoid; }
      body { background: white; color: black; }
      .chip { background: var(--m3-color-surface) !important; border-color: var(--m3-color-outline) !important; }
    }
        .company-info {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .title-container {
            text-align: center;
        }

        .meta-item {
            text-align: center;
        }
    }
    /* Typography enhancements */
    .highlight {
      color: var(--m3-color-on-surface);
      font-weight: 500;
    }
    .lead {
      font-size: var(--m3-font-body-large);
      margin-bottom: var(--spacing-lg);
    }
    strong {
      color: var(--m3-color-on-surface);
      font-weight: 600;
    }
</style>
