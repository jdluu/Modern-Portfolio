---
import {getAllExperiences} from '../../lib/cosmic';
import BaseLayout from "../../layouts/BaseLayout.astro";

interface Metadata {
    description?: string;
    company?: {
        name?: string;
        image?: {
            url?: string;
            imgix_url?: string;
        } | null;
        imagealt?: string | null;
    };
    logistics?: {
        duration?: string;
        role?: string;
    };
    technologies?: {
        tools?: string;
        skills?: string;
    };
    work?: {
        responsibilities?: { duties: string }[];
        achievements?: { points: string }[];
    };
    showcase?: {
        link?: string | null;
        description?: string | null;
    };
}

interface PageProps {
    title: string;
    metadata: Metadata;
}

export async function getStaticPaths() {
    try {
        const experiences = await getAllExperiences();
        return experiences.map(({slug, title, metadata}) => ({
            params: { slug },
            props: { title, metadata }
        }));
    } catch (error) {
        console.error('Error in getStaticPaths:', error);
        return [];
    }
}

const { title, metadata } = Astro.props as PageProps;

// Safely access nested properties with null checks
const companyName = metadata?.company?.name ?? 'Company Name Not Available';
const companyLogo = metadata?.company?.image?.imgix_url ?? '/placeholder-logo.png';
const role = metadata?.logistics?.role ?? 'Role Not Specified';
const duration = metadata?.logistics?.duration ?? 'Duration Not Specified';
const description = metadata?.description ?? 'No description available';
const tools = metadata?.technologies?.tools ?? 'Not specified';
const skills = metadata?.technologies?.skills ?? 'Not specified';
const responsibilities = metadata?.work?.responsibilities?.filter(r => r?.duties) ?? [];
const achievements = metadata?.work?.achievements?.filter(a => a?.points) ?? [];
const showcase = metadata?.showcase && metadata.showcase.link && metadata.showcase.description 
    ? [metadata.showcase] 
    : [];
---

<BaseLayout title={title}>
    <main class="experience-page-container">
        <article class="experience-page-div">
            <!-- Main Content Column -->
            <div class="main-content">
                <section id="overview" aria-labelledby="experience-title">
                    <div class="experience-header">
                        <div class="company-info" role="banner">
                            <img
                                src={companyLogo}
                                alt={`${companyName} logo`}
                                class="company-logo"
                                onerror="this.src='/placeholder-logo.png'"
                                width="80"
                                height="80"
                                loading="lazy"
                                aria-hidden="true"
                            />
                            <div class="title-container">
                                <h1 id="experience-title" class="experience-title" tabindex="-1">{title}</h1>
                                <p class="company-name"><strong>{companyName}</strong></p>
                            </div>
                        </div>
                    </div>
                    <p class="section-content lead">{description}</p>
                </section>

                <section id="responsibilities" aria-labelledby="responsibilities-title">
                    <h2 id="responsibilities-title" tabindex="-1">Key Responsibilities</h2>
                    {responsibilities.length > 0 ? (
                        <ul class="responsibilities-list" role="list">
                            {responsibilities.map((item, index) => (
                                <li aria-label={`Responsibility ${index + 1}`}><span class="highlight">{item.duties}</span></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No responsibilities available.</p>
                    )}
                </section>

                <section id="achievements" aria-labelledby="achievements-title">
                    <h2 id="achievements-title" tabindex="-1">Notable Achievements</h2>
                    {achievements.length > 0 ? (
                        <ul class="achievements-list" role="list">
                            {achievements.map((item, index) => (
                                <li aria-label={`Achievement ${index + 1}`}><strong>{item.points}</strong></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No achievements available.</p>
                    )}
                </section>
            </div>

            <!-- Sidebar Column -->
            <aside class="sidebar-content">
              <nav class="sidebar-card toc" aria-label="Page sections">
                <h3>On this page</h3>
                <ol class="toc-list" role="list">
                  <li><a href="#overview">Overview</a></li>
                  {responsibilities.length > 0 && <li><a href="#responsibilities">Responsibilities</a></li>}
                  {achievements.length > 0 && <li><a href="#achievements">Achievements</a></li>}
                  {showcase.length > 0 && <li><a href="#showcase">Showcase</a></li>}
                </ol>
                <div class="progress">
                  <div class="progress-bar" aria-hidden="true"></div>
                  <span class="sr-only" id="read-progress">Reading progress</span>
                </div>
              </nav>
                <div class="sidebar-card">
                    <h3 id="logistics-title">Logistics</h3>
                    <div class="experience-meta">
                        <div class="meta-item">
                            <span class="meta-label" id="role-label">Role</span>
                            <span class="meta-value" aria-labelledby="role-label"><strong>{role}</strong></span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label" id="duration-label">Duration</span>
                            <span class="meta-value" aria-labelledby="duration-label"><strong>{duration}</strong></span>
                        </div>
                    </div>
                </div>
                <div class="sidebar-card">
                    <h3 id="tech-title">Technology Stack</h3>
                    <div class="tech-section">
                        <div class="tech-item">
                            <h4 id="tools-title">Tools & Technologies</h4>
                            <div class="chip-row" aria-labelledby="tools-title">
                                {(tools || 'N/A').split(',').map(t => t.trim()).filter(Boolean).map((t, i) => (
                                    <span class="chip">{t}</span>
                                ))}
                            </div>
                        </div>
                        <div class="tech-item">
                            <h4 id="skills-title">Skills</h4>
                            <div class="chip-row" aria-labelledby="skills-title">
                                {(skills || 'N/A').split(',').map(s => s.trim()).filter(Boolean).map((s, i) => (
                                    <span class="chip">{s}</span>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
                {showcase.length > 0 && (
                    <div class="sidebar-card">
                        <section id="showcase" aria-labelledby="showcase-title">
                            <h3 id="showcase-title" tabindex="-1">Project Showcase</h3>
                            <div class="showcase-grid">
                                {showcase.map((item) => (
                                    <a href={item.link}
                                       class="showcase-item"
                                       target="_blank"
                                       rel="noopener noreferrer"
                                       aria-label={`View project: ${item.description}`}>
                                        <p><strong>{item.description}</strong></p>
                                        <span class="showcase-link">View Project <span class="sr-only">opens in new tab</span>â†’</span>
                                    </a>
                                ))}
                            </div>
                        </section>
                    </div>
                )}
            </aside>
        </article>
    </main>
</BaseLayout>

<style>
    /* Layout & Container Styles */
    .experience-page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--spacing-lg);
    }

    .experience-page-div {
        display: grid;
        grid-template-columns: minmax(0, 2.2fr) minmax(280px, 1fr);
        gap: var(--spacing-xl);
        align-items: start;
    }

    .main-content {
        max-width: 80ch; /* Optimal line-length for reading */
    }

    /* Header Styles */
    .experience-header {
        margin-bottom: var(--spacing-lg);
        padding-bottom: var(--spacing-md);
        border-bottom: 1px dashed color-mix(in oklab, var(--m3-color-outline) 40%, transparent);
    }

    .company-info {
        display: flex;
        align-items: flex-start;
        gap: clamp(1.5rem, 3vw, var(--spacing-lg));
        margin-bottom: var(--spacing-lg);
    }

    .company-logo {
        width: 80px;
        height: 80px;
        object-fit: contain;
        border-radius: 8px;
        background: white;
        padding: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,.06);
        flex-shrink: 0;
    }

    .title-container {
        flex: 1;
        min-width: 0;
    }

    .experience-title {
        font-size: clamp(1.75rem, 5vw, 2.5rem);
        margin: 0;
        color: var(--text-color);
        line-height: 1.2;
        word-wrap: break-word;
        font-family: var(--font-heading);
        font-weight: 700;
    }

    .company-name {
        font-size: clamp(1.25rem, 3vw, 1.5rem);
        color: var(--text-color);
        margin: 0.5rem 0;
        word-wrap: break-word;
    }

    /* Sidebar Styles */
    .sidebar-card {
        background: var(--m3-color-surface-variant);
        padding: var(--spacing-lg);
        border-radius: 12px;
        margin-bottom: var(--spacing-lg);
    }

    .experience-meta {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
        align-items: flex-start;
    }

    .meta-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .meta-label {
        font-size: 1rem;
        color: var(--text-color);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: bold;
    }

    .meta-value {
        color: var(--text-color);
        line-height: 1.4;
        font-size: 1.1rem;
    }

    /* Section Content */
    .section-content {
        font-size: clamp(1rem, 2.5vw, 1.2rem);
        line-height: 1.6;
        color: var(--text-color);
        margin: var(--spacing-lg) 0;
    }

    .tech-section {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }

    .tech-item h4 {
        font-size: clamp(1.1rem, 3vw, 1.25rem);
        margin-bottom: var(--spacing-sm);
        color: var(--text-color);
        font-family: var(--font-heading);
    }

    .tech-item p {
        color: var(--text-color);
        line-height: 1.6;
        word-wrap: break-word;
        font-size: 1.1rem;
    }

    /* Lists Styles */
    .responsibilities-list,
    .achievements-list {
        list-style: none;
        padding: 0;
        margin: var(--spacing-md) 0;
    }

    .responsibilities-list li,
    .achievements-list li {
        position: relative;
        padding-left: 1.5em;
        margin-bottom: var(--spacing-md);
        font-size: var(--m3-font-body-large); /* 1.6rem */
        line-height: 1.7;
        color: var(--text-color);
    }

    .responsibilities-list li::before {
        content: "â€¢";
        position: absolute;
        left: 0;
        color: var(--accent-color);
    }

    .achievements-list li::before {
        content: "â˜…";
        position: absolute;
        left: 0;
        color: var(--accent-color);
    }

    /* Section Titles */
    .main-content h2 {
        padding-top: var(--spacing-lg);
        border-top: 1px dashed color-mix(in oklab, var(--m3-color-outline) 40%, transparent);
        font-size: var(--m3-font-headline-small); /* 2.4rem */
        color: var(--text-color);
        margin: var(--spacing-xl) 0 var(--spacing-md);
        font-family: var(--font-heading);
        font-weight: 600;
    }

    .sidebar-card h3 {
        font-size: var(--m3-font-title-medium); /* 1.6rem */
        margin-bottom: var(--spacing-md);
    }

    /* Responsive Styles */
/* Sidebar sticky + TOC */
.sidebar-content {
  position: sticky;
  top: calc(var(--nav-height) + var(--spacing-md));
  align-self: start;
}
.sidebar-card.toc {
  background: color-mix(in oklab, var(--m3-color-surface-variant) 85%, transparent);
  border: 1px solid color-mix(in oklab, var(--m3-color-outline) 35%, transparent);
  backdrop-filter: saturate(1.1) blur(2px);
}
/* TOC List */
.toc-list {
  margin: 0 0 var(--spacing-lg);
  padding: 0;
  list-style: none;
}
.toc-list a {
  display: inline-block;
  padding: 6px 0;
  color: var(--m3-color-on-surface);
  text-decoration: none;
}
.toc-list a:hover,
.toc-list a:focus-visible {
  color: var(--m3-color-primary);
  text-decoration: underline;
}
/* Reading progress */
.progress {
  width: 100%;
  height: 6px;
  background: color-mix(in oklab, var(--m3-color-outline) 15%, transparent);
  border-radius: 999px;
  overflow: hidden;
  margin-bottom: var(--spacing-lg);
}
.progress-bar {
  width: 0%;
  height: 100%;
  background: var(--m3-color-primary);
  transition: width 120ms linear;
}
/* Chip hover/focus states */
.chip:hover,
.chip:focus-visible {
  background: var(--m3-color-primary);
  color: var(--m3-color-on-primary);
  border-color: var(--m3-color-primary);
}
    @media (max-width: 992px) {
        .experience-page-div {
            grid-template-columns: 1fr; /* Stack columns */
        }
    
        .sidebar-content {
            grid-row: 2;
        }
    }

    @media (max-width: 768px) {
        .experience-page-container {
            padding: var(--spacing-md);
        }

        .company-info {
            gap: var(--spacing-md);
        }
    }

    @media (max-width: 480px) {
        .experience-page-container {
            padding: var(--spacing-sm);
        }

/* Sidebar sticky + TOC */
    .sidebar-content {
      position: sticky;
      top: calc(var(--nav-height) + var(--spacing-md));
      align-self: start;
    }
    .sidebar-card.toc {
      background: color-mix(in oklab, var(--m3-color-surface-variant) 85%, transparent);
      border: 1px solid color-mix(in oklab, var(--m3-color-outline) 35%, transparent);
      backdrop-filter: saturate(1.1) blur(2px);
    }
    .toc h3 {
      margin-bottom: var(--spacing-sm);
    }
    .toc-list {
      margin: 0 0 var(--spacing-lg);
      padding: 0;
      list-style: none;
    }
    .toc-list a {
      display: inline-block;
      padding: 6px 0;
      color: var(--m3-color-on-surface);
      text-decoration: none;
    }
    .toc-list a:hover,
    .toc-list a:focus-visible {
      color: var(--m3-color-primary);
      text-decoration: underline;
    }
    /* Reading progress */
    .progress {
      width: 100%;
      height: 6px;
      background: color-mix(in oklab, var(--m3-color-outline) 15%, transparent);
      border-radius: 999px;
      overflow: hidden;
      margin-bottom: var(--spacing-lg);
    }
    .progress-bar {
      width: 0%;
      height: 100%;
      background: var(--m3-color-primary);
      transition: width 120ms linear;
    }
    /* Chips */
    .chip-row {
      display: flex;
      flex-wrap: wrap;
      gap: var(--spacing-sm);
    }
    .chip {
      display: inline-flex;
      align-items: center;
      padding: 6px 10px;
      border-radius: 999px;
      font-size: var(--m3-font-label-medium);
      background: color-mix(in oklab, var(--m3-color-primary) 10%, var(--m3-color-surface-variant));
      color: var(--m3-color-on-surface);
      border: 1px solid color-mix(in oklab, var(--m3-color-primary) 25%, transparent);
    }
    /* Print styles (resume-friendly) */
    @media print {
      .sidebar-content { position: static !important; }
      .toc, nav, header, footer { display: none !important; }
      .sidebar-card { break-inside: avoid; }
      body { background: white; color: black; }
      .chip { background: var(--m3-color-surface) !important; border-color: var(--m3-color-outline) !important; }
    }
        .company-info {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .title-container {
            text-align: center;
        }

        .meta-item {
            text-align: center;
        }
    }
    /* Typography enhancements */
    .highlight {
      color: var(--accent-color);
      font-weight: 500;
    }
    .lead {
      font-size: var(--m3-font-body-large);
      margin-bottom: var(--spacing-lg);
    }
    strong {
      color: var(--accent-color);
      font-weight: 600;
    }
</style>

<script>
    // Smooth scrolling for navigation links with keyboard support
    document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', handleSmoothScroll);
        anchor.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSmoothScroll(e);
            }
        });
    });

    function handleSmoothScroll(e: MouseEvent | KeyboardEvent) {
        e.preventDefault();
        const currentTarget = e.currentTarget as HTMLAnchorElement;
        const href = currentTarget.getAttribute('href');
        if (!href) return;

        const targetElement = document.querySelector(href) as HTMLElement;
        
        if (targetElement) {
            const navHeight = parseInt(getComputedStyle(document.documentElement)
                .getPropertyValue('--nav-height')) || 64;
            const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
            const offsetPosition = targetPosition - navHeight - 32;

            window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
            });

            // Set focus to the target heading
            const heading = targetElement.querySelector('h1, h2, h3, h4, h5, h6') as HTMLElement;
            if (heading) {
                heading.focus({ preventScroll: true });
            }

            // Update URL without jumping
            history.pushState(null, '', href);
        }
    }

    // IntersectionObserver: update TOC active link and reading progress
    const tocLinks = Array.from(document.querySelectorAll<HTMLAnchorElement>('.toc-list a'));
    const sections = tocLinks
      .map(a => document.querySelector<HTMLElement>(a.getAttribute('href')!))
      .filter((e): e is HTMLElement => e !== null);
    const progressBar = document.querySelector<HTMLDivElement>('.progress-bar')!;

    const io = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = '#' + entry.target.id;
          tocLinks.forEach(l => l.removeAttribute('aria-current'));
          const active = tocLinks.find(l => l.getAttribute('href') === id);
          active?.setAttribute('aria-current', 'true');
        }
      });
    }, { rootMargin: '-40% 0px -55% 0px', threshold: 0.01 });

    sections.forEach(s => io.observe(s));

    // Read progress
    const onScroll = () => {
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const pct = Math.max(0, Math.min(1, docHeight ? scrollTop / docHeight : 0));
      if (progressBar) progressBar.style.width = (pct * 100).toFixed(1) + '%';
    };
    onScroll();
    window.addEventListener('scroll', onScroll, { passive: true });
</script>