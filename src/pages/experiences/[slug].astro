---
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { Experience } from "../../types/experience";
import { getCollection } from "astro:content";
import { resolveAssetUrl, pickImageString, sanitizeStringForUI } from "../../lib/utils";
  
// Generate static paths from collection entries
export async function getStaticPaths() {
  const entries = await getCollection("experiences");
  const paths = (entries ?? [])
    .filter((e: any) => e.data?.draft !== true)
    .map((e: any) => {
      const canonicalSlug =
        typeof e.slug === "string" && e.slug.length > 0
          ? e.slug
          : String(e.id ?? "").replace(/\.(md|mdx)$/i, "");
      return { params: { slug: canonicalSlug } };
    });
  return paths;
}
 
const slugParam = (Astro.params as any)?.slug as string;

const experiencesEntries = await getCollection("experiences");
const entry =
  (experiencesEntries ?? []).find((e: any) => {
    const canonicalSlug =
      typeof e.slug === "string" && e.slug.length > 0
        ? e.slug
        : String(e.id ?? "").replace(/\.(md|mdx)$/i, "");
    const canonicalId = String(e.id ?? "").replace(/\.(md|mdx)$/i, "");
    return (
      slugParam === canonicalSlug ||
      slugParam === canonicalId ||
      slugParam === String(e.id ?? "")
    );
  }) ?? null;

if (!entry) {
  throw new Error(`Experience not found for slug: ${slugParam}`);
}
const experience = entry.data as any as Experience;
const title = experience?.title ?? "Untitled";
const companyName = experience?.company?.name ?? "Company Name Not Available";
const companyLogo = resolveAssetUrl(pickImageString(experience?.company?.image)) ?? "/placeholder-logo.png";
const role = experience?.logistics?.role ?? "Role Not Specified";
const duration = experience?.logistics?.duration ?? "Duration Not Specified";
const tools = sanitizeStringForUI(experience?.technologies?.tools) || "";
const skills = sanitizeStringForUI(experience?.technologies?.skills) || "";
const techArray = skills
  ? (String(skills).split(",").map((s) => s.trim()).filter(Boolean))
  : [];
const toolsArray = tools
  ? (String(tools).split(",").map((s) => s.trim()).filter(Boolean))
  : [];
const responsibilities = Array.isArray(experience?.work?.responsibilities)
  ? (experience.work!.responsibilities!.filter((r) => r?.duties) as { duties?: string }[])
  : [];
const achievements = Array.isArray(experience?.work?.achievements)
  ? (experience.work!.achievements!.filter((a) => a?.points) as { points?: string }[])
  : [];
const showcase = experience?.showcase && experience.showcase.link && experience.showcase.description ? [experience.showcase] : [];
---
 
<BaseLayout title={title}>
    <link slot="head" rel="stylesheet" href="/styles/slugs/experiences.css" />
    <main class="experience-page-container">
        <article class="experience-page-div">
            <section id="overview" aria-labelledby="experience-title">
                <div class="experience-header">
                    <div class="company-info" role="banner">
                        <img
                            src={companyLogo}
                            alt={`${companyName} logo`}
                            class="company-logo"
                            width="80"
                            height="80"
                            loading="eager"
                            decoding="async"
                            aria-hidden="true"
                        />
                        <div class="title-container">
                            <h1 id="experience-title" class="experience-title" >{title}</h1>
                            <p class="company-name"><strong>{companyName}</strong></p>
                        </div>
                    </div>
                </div>
            </section>


            <div class="main-content">
            <div class="info-row">
              <div class="card" aria-hidden="false">
                <h3 class="role-heading">Role</h3>
                <p class="role-body">{role}</p>
                <dl class="kv">
                  <dt>Timeline</dt>
                  <dd>{duration}</dd>
                </dl>
              </div>
 
              <div class="card">
                <div class="tt-grid" role="group" aria-label="Topics and technologies">
                  <div class="tt-column" aria-labelledby="concept-label">
                    <h4 id="concept-label" class="tt-subheading">Concepts</h4>
                    {techArray.length > 0 ? (
                      <ul class="tech-list" aria-label="Concepts">
                        {techArray.map((t) => (<li><span class="tech-pill">{t}</span></li>))}
                      </ul>
                    ) : (
                      <p class="section-content">No concepts listed.</p>
                    )}
                  </div>
 
                  <div class="tt-column" aria-labelledby="tool-label">
                    <h4 id="tool-label" class="tt-subheading">Technologies</h4>
                    {toolsArray.length > 0 ? (
                      <ul class="tech-list" aria-label="Technologies">
                        {toolsArray.map((t) => (<li><span class="tech-pill">{t}</span></li>))}
                      </ul>
                    ) : (
                      <p class="section-content">No technologies listed.</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
            {showcase.length > 0 && (
              <div class="showcase-inline sidebar-card">
                <section id="showcase" aria-labelledby="showcase-title">
                  <h3 id="showcase-title" tabindex="-1">Project Showcase</h3>
                  <div class="showcase-grid">
                    {showcase.map((item) => (
                      <a href={item.link}
                         class="showcase-item"
                         target="_blank"
                         rel="noopener noreferrer"
                         aria-label={`View project: ${item.description}`}>
                        <p><strong>{item.description}</strong></p>
                        <span class="showcase-link">View Project <span class="sr-only">opens in new tab</span>â†’</span>
                      </a>
                    ))}
                  </div>
                </section>
              </div>
            )}

                <section id="responsibilities" aria-labelledby="responsibilities-title">
                    <h2 id="responsibilities-title" >Key Responsibilities</h2>
                    {responsibilities.length > 0 ? (
                        <ul class="responsibilities-list" role="list">
                            {responsibilities.map((item, index) => (
                                <li aria-label={`Responsibility ${index + 1}`}><span class="highlight">{item.duties}</span></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No responsibilities available.</p>
                    )}
                </section>

                <section id="achievements" aria-labelledby="achievements-title">
                    <h2 id="achievements-title" >Notable Achievements</h2>
                    {achievements.length > 0 ? (
                        <ul class="achievements-list" role="list">
                            {achievements.map((item, index) => (
                                <li aria-label={`Achievement ${index + 1}`}><strong>{item.points}</strong></li>
                            ))}
                        </ul>
                    ) : (
                        <p class="empty-state">No achievements available.</p>
                    )}
                </section>
            </div>
        </article>
    </main>
</BaseLayout>
 