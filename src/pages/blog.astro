---
import BaseLayout from "../layouts/BaseLayout.astro";
import { client } from "../../tina/__generated__/client";

const title = "Blog";

// Fetch posts
const postsResp = await client.queries.postConnection();
const edges = postsResp?.data?.postConnection?.edges ?? [];
const nodes = edges.map((e) => e?.node).filter((n) => n);

type PostIndexItem = {
  title: string;
  slug: string;
  date: string | null;
  description: string;
  draft: boolean;
  tags: string[];
};

const posts: PostIndexItem[] = nodes
  .map((node: any) => {
    const filename = node._sys?.filename ?? "";
    const slug = filename.replace(/\.mdx?$/i, "").toLowerCase();
    const tags = Array.isArray(node.tags)
      ? (node.tags as string[]).filter((t) => !!t && typeof t === "string")
      : [];

    return {
      title: node.title ?? "Untitled",
      slug,
      date: node.date ?? null,
      description: node.description ?? "",
      draft: Boolean(node.draft),
      tags,
    };
  })
  .filter((p) => !p.draft)
  .sort((a, b) => {
    const da = a.date ? new Date(a.date).getTime() : 0;
    const db = b.date ? new Date(b.date).getTime() : 0;
    return db - da;
  });
---

<BaseLayout title={title}>
  <main class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-10">
    <header class="mb-10 text-center">
      <h1 class="text-4xl sm:text-5xl font-bold tracking-tight text-[var(--m3-color-on-surface)]">{title}</h1>
      <p class="mt-3 text-[var(--m3-color-on-surface-variant)]">Latest posts</p>
    </header>

    {
      posts.length === 0 ? (
        <p class="text-center text-[var(--m3-color-on-surface-variant)]">No posts published yet.</p>
      ) : (
        <ul class="space-y-5">
          {posts.map((post) => (
            <li>
              <a
                href={`/posts/${post.slug}`}
                class="block w-full rounded-2xl bg-[var(--m3-color-surface)] p-6 border-2 border-solid border-[var(--m3-color-outline)] shadow-sm hover:border-[var(--m3-color-primary)] hover:shadow-md focus-visible:outline-none focus-visible:ring-4 focus-visible:ring-[var(--m3-color-primary)] transition"
                style="border-bottom-width: 2px;" 
              >
                <!-- Neutralize global anchor bottom border for this card -->
                <style is:inline>
                  a.block.w-full.rounded-2xl { border-bottom: 0 !important; text-decoration: none !important; }
                </style>

                <h2 class="text-2xl font-semibold text-[var(--m3-color-on-surface)] transition-colors hover:text-[var(--m3-color-primary)]">
                  {post.title}
                </h2>

                {post.date && (
                  <time class="mt-1 block text-sm text-[var(--m3-color-on-surface-variant)]">
                    {new Date(post.date).toLocaleDateString()}
                  </time>
                )}

                {post.tags && post.tags.length > 0 && (
                  <div class="mt-3 flex flex-wrap gap-2">
                    {post.tags.slice(0, 6).map((tag) => (
                      <span class="inline-flex items-center rounded-full bg-[var(--m3-color-secondary-container)] text-[var(--m3-color-on-secondary-container)] border border-[var(--m3-color-outline-variant)] px-3 py-1 text-xs font-medium">
                        #{tag}
                      </span>
                    ))}
                  </div>
                )}

                {post.description && (
                  <p class="mt-3 text-[var(--m3-color-on-surface-variant)] line-clamp-3">
                    {post.description}
                  </p>
                )}
              </a>
            </li>
          ))}
        </ul>
      )
    }
  </main>
</BaseLayout>

<style>
/* Basic line clamp without Tailwind plugin */
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>
