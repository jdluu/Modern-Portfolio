---
import BaseLayout from "../layouts/BaseLayout.astro";
import BlogSection from "../components/sections/BlogSection.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import type { PostIndexItem } from "../types/post";

/* Page title (consistent naming across pages) */
const pageTitle = "Blog";

/* Helpers for transforming Astro content collection entries into
   the PostIndexItem shape expected by the UI.
*/
function normalizeDate(value: unknown): string | null {
  if (!value) return null;
  const d = value instanceof Date ? value : new Date(String(value));
  return isNaN(d.getTime()) ? null : d.toISOString();
}

type PostEntry = CollectionEntry<"posts">;

/* Fetch all entries for the "posts" collection at build-time.
   Keep the transformation local to this page to avoid adding new
   cross-cutting modules while improving clarity and types.
*/
const entries: PostEntry[] = (await getCollection("posts")) ?? [];

const postIndexItems: PostIndexItem[] = entries
  .map((entry) => {
    return {
      title: entry.data?.title ?? "Untitled",
      slug: String(entry.slug ?? entry.id ?? "").toLowerCase(),
      date: normalizeDate(entry.data?.date ?? null),
      description: entry.data?.description ?? "",
      tags: Array.isArray(entry.data?.tags)
        ? entry.data.tags.filter((t) => typeof t === "string")
        : [],
      draft: Boolean(entry.data?.draft),
    } as PostIndexItem;
  })
  .filter((p) => !p.draft)
  .sort((a, b) => {
    const ta = a.date ? Date.parse(a.date) : 0;
    const tb = b.date ? Date.parse(b.date) : 0;
    return tb - ta;
  });
---
<BaseLayout title={pageTitle}>
  <link slot="head" rel="stylesheet" href="/styles/sections/blog.css" />
  <BlogSection posts={postIndexItems} />
</BaseLayout>
