---
import {getAllProjects} from "../../lib/cosmic";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { Project } from "../../types/project";


export async function getStaticPaths() {
    const projects = await getAllProjects() as unknown as Project[];
 
    return projects.map((project) => {
        const slug = project.slug ?? String(project?.id ?? "");
        return {
            params: { slug },
            props: project,
        };
    });
}
 
const project = Astro.props as Project;
const title = project.title ?? "";

// Derived/normalized helpers (handle CMS unions: objects vs arrays vs strings)
const slug = (project as any)?.slug ?? String((project as any)?.id ?? "");

// process may be an object with title/plan or an array of strings
const processTitle: string =
  project.process && typeof project.process === "object" && "title" in project.process
    ? (project.process as any).title ?? ""
    : "";
const processPlan: any[] =
  project.process && typeof project.process === "object" && Array.isArray((project.process as any).plan)
    ? (project.process as any).plan
    : Array.isArray(project.process)
    ? (project.process as any).map((s: any) => ({ steps: s }))
    : [];

// background/problem/solution normalization (accept object or string)
const backgroundDescription: string =
  project.background && typeof project.background === "object"
    ? (project.background as any).description ?? ""
    : "";
const problemDesc: string =
  project.problem && typeof project.problem === "object"
    ? (project.problem as any).description ?? ""
    : (project.problem as any) ?? "";
const solutionTitle: string =
  project.solution && typeof project.solution === "object"
    ? (project.solution as any).title ?? ""
    : "";
const solutionDesc: string =
  project.solution && typeof project.solution === "object"
    ? (project.solution as any).description ?? (project.solution as any) ?? ""
    : (project.solution as any) ?? "";

// reflection may be an array of strings or an object with points[]
const reflectionPoints: { point?: string }[] =
  Array.isArray(project.reflection)
    ? (project.reflection as any).map((p: any) => (typeof p === "string" ? { point: p } : p))
    : (project.reflection && typeof project.reflection === "object" && Array.isArray((project.reflection as any).points))
    ? (project.reflection as any).points
    : [];
---

<BaseLayout title={title}>
    <nav id="left-tray" aria-label="Table of Contents">
        <ul id="table-of-contents" role="navigation">
            <li>
                <a href="#overview" id="ido" class="nav-item" aria-current="false">Overview</a>
            </li>
            <li>
                <a href="#background" id="idb" class="nav-item" aria-current="false">Background</a>
            </li>
            <li>
                <a href="#process" id="idd" class="nav-item" aria-current="false">{processTitle}</a>
            </li>
            <li>
                <a href="#results" id="idf" class="nav-item" aria-current="false">Final Product</a>
            </li>
            <li>
                <a href="#reflection" id="idr" class="nav-item" aria-current="false">Reflection</a>
            </li>
            <li>
                <button id="hide-button" aria-label="Hide Table of Contents" class="toc-button">
                    Hide Table of Contents ◀
                </button>
            </li>
        </ul>
        <button id="show-button" aria-label="Show Table of Contents" class="toc-button">
            Show Table of Contents ≡
        </button>
    </nav>

    <main class="project-page-container">
        <article class="project-page-div">
            <section id="overview" aria-labelledby="project-title">
                <h1 id="project-title" class="project-title">{title}</h1>
                <p class="section-content lead">{project.description}</p>
                <figure class="project-figure">
                    <img
                        class="project-image"
                        src={project.home?.image?.imgix_url + '?w=800'}
                        srcset={`${project.home?.image?.imgix_url}?w=400 400w,
                                ${project.home?.image?.imgix_url}?w=800 800w,
                                ${project.home?.image?.imgix_url}?w=1200 1200w`}
                        sizes="(max-width: 768px) 100vw, 80vw"
                        alt={project.home?.imagealt}
                        loading="eager"
                        fetchpriority="high"
                    />
                </figure>

                <div class="info-grid">
                    <div class="info-card">
                        <h3>Timeline</h3>
                        <p>{project.logistics?.date}</p>
                    </div>
                    <div class="info-card">
                        <h3>{project.logistics?.techtitle}</h3>
                        <p>{project.logistics?.technologies}</p>
                    </div>
                    <div class="info-card">
                        <h3>Tools</h3>
                        <p>{project.logistics?.tools}</p>
                    </div>
                </div>
 
                <div class="responsibilities">
                    <h2>My Responsibilities as {project.work?.role}</h2>
                    <ul>
                        {(project.work?.responsibilities ?? []).map((responsibility: any, index: number) => (
                            <li class="role-bullet-item">
                                {responsibility.duties}
                            </li>
                        ))}
                    </ul>
                </div>
            </section>
 
            <section id="background" class="content-section">
                <h2>Background</h2>
                <p class="section-content">{backgroundDescription}</p>
                
                <h2>Problem Statement</h2>
                <p class="section-content">{problemDesc}</p>
                
                <h2>{solutionTitle}</h2>
                <p class="section-content">{solutionDesc}</p>
            </section>
 
            <section id="process" class="content-section">
                <h2>{processTitle}</h2>
                {processPlan.map((plan: any, index: number) => (
                    <p class="section-content">{plan.steps}</p>
                ))}
                <figure class="project-figure">
                    <img
                        class="project-image"
                        src={project.prototype?.image?.imgix_url + '?w=800'}
                        srcset={`${project.prototype?.image?.imgix_url}?w=400 400w,
                                ${project.prototype?.image?.imgix_url}?w=800 800w,
                                ${project.prototype?.image?.imgix_url}?w=1200 1200w`}
                        sizes="(max-width: 768px) 100vw, 80vw"
                        alt={project.prototype?.imagealt}
                        loading="lazy"
                        decoding="async"
                    />
                </figure>
            </section>
 
            <section id="results" class="content-section">
                <h2>Final Product</h2>
                <p class="section-content">{project.final?.description}</p>
                <figure class="project-figure">
                    <img
                        class="project-image"
                        src={project.final?.image?.imgix_url + '?w=800'}
                        srcset={`${project.final?.image?.imgix_url}?w=400 400w,
                                ${project.final?.image?.imgix_url}?w=800 800w,
                                ${project.final?.image?.imgix_url}?w=1200 1200w`}
                        sizes="(max-width: 768px) 100vw, 80vw"
                        alt={project.final?.imagealt}
                        loading="lazy"
                        decoding="async"
                    />
                </figure>
            </section>
 
            <section id="reflection" class="content-section">
                <h2>Reflection</h2>
                {reflectionPoints.map((reflection: any, index: number) => (
                    <p class="section-content">{reflection.point}</p>
                ))}
                <a
                    href={project.source?.link}
                    class="source-link"
                    target="_blank"
                    rel="noreferrer"
                    aria-label={`View source: ${project.source?.title}`}
                >
                    <strong>{project.source?.title}</strong>
                </a>
            </section>
        </article>
    </main>
</BaseLayout>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tableOfContents = document.getElementById("table-of-contents");
        const hideButton = document.getElementById("hide-button");
        const showButton = document.getElementById("show-button");
        const navItems = document.getElementsByClassName("nav-item");

        // Intersection Observer for sections
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Update nav items
                    Array.from(navItems).forEach(item => {
                        if (!item || !item.getAttribute) return;
                        
                        const href = item.getAttribute('href');
                        if (!href) return;

                        const targetId = entry.target.id;
                        const itemHref = href.substring(1);
                        
                        if (itemHref === targetId) {
                            item.setAttribute('aria-current', 'true');
                            item.classList.add('link-active');
                        } else {
                            item.setAttribute('aria-current', 'false');
                            item.classList.remove('link-active');
                        }
                    });
                }
            });
        }, { threshold: 0.2 });

        // Observe all sections
        document.querySelectorAll('section').forEach(section => {
            if (section) observer.observe(section);
        });

        // Table of Contents Toggle
        function toggleTableOfContents(show: boolean) {
            if (tableOfContents && showButton) {
                tableOfContents.style.display = show ? 'block' : 'none';
                showButton.style.visibility = show ? 'hidden' : 'visible';
                
                // Add animation class
                tableOfContents.classList.toggle('toc-visible', show);
            }
        }

        toggleTableOfContents(true);

        hideButton?.addEventListener("click", () => toggleTableOfContents(false));
        showButton?.addEventListener("click", () => toggleTableOfContents(true));

        // Smooth scroll for navigation
        document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
            anchor.addEventListener('click', (e) => {
                e.preventDefault();
                const href = anchor.getAttribute('href');
                if (!href) return;

                const targetElement = document.querySelector<HTMLElement>(href);
                
                if (targetElement) {
                    const navHeight = parseInt(getComputedStyle(document.documentElement)
                        .getPropertyValue('--nav-height')) || 64; // fallback to 64px
                    const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
                    const offsetPosition = targetPosition - navHeight - 32; // 32px additional buffer

                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });

                    // Update URL without jumping
                    history.pushState(null, '', href);
                }

                // Auto-hide TOC on mobile after clicking
                if (window.innerWidth <= 768) {
                    toggleTableOfContents(false);
                }
            });
        });
    });
</script>

<style>
    /* Layout & Container Styles */
    .project-page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--spacing-md);
        margin-left: clamp(5%, 15%, 20%);
        margin-right: clamp(5%, 15%, 20%);
    }

    .project-page-div {
        text-align: left;
    }

    /* Typography */
    .project-title {
        font-family: var(--font-heading);
        font-weight: bold;
        font-size: clamp(2rem, 5vw, 3.5rem);
        line-height: 1.2;
        margin-bottom: var(--spacing-md);
        color: var(--text-color);
    }

    h2 {
        font-family: var(--font-heading);
        font-weight: bold;
        font-size: clamp(1.5rem, 4vw, 2.5rem);
        margin: var(--spacing-md) 0 var(--spacing-sm);
        color: var(--text-color);
    }

    h3 {
        font-family: var(--font-heading);
        font-weight: bold;
        font-size: clamp(1.25rem, 3vw, 1.75rem);
        margin: var(--spacing-sm) 0;
        color: var(--text-color);
    }

    .section-content {
        font-size: clamp(1rem, 2vw, 1.25rem);
        line-height: 1.6;
        margin-bottom: var(--spacing-sm);
        color: var(--text-color);
    }

    .lead {
        font-size: clamp(1.1rem, 2.5vw, 1.5rem);
        margin-bottom: var(--spacing-md);
    }

    /* Navigation */
    #left-tray {
        position: fixed;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        background-color: var(--background-color);
        box-shadow: var(--shadow-md);
        z-index: 50;
        transition: transform var(--transition-normal);
    }

    #table-of-contents {
        padding: 0;
        margin: 0;
        list-style: none;
        font-family: var(--font-secondary);
    }

    .nav-item {
        display: block;
        padding: var(--spacing-xs) var(--spacing-sm);
        color: var(--text-color);
        text-decoration: none;
        border-radius: var(--radius-sm);
        transition: all var(--transition-fast);
    }

    .nav-item:hover,
    .nav-item:focus {
        background-color: color-mix(in srgb, var(--text-color) 10%, transparent);
        transform: translateX(var(--spacing-xs));
    }

    .link-active {
        font-weight: bold;
        background-color: color-mix(in srgb, var(--text-color) 15%, transparent);
    }

    /* Buttons */
    .toc-button {
        padding: var(--spacing-sm) var(--spacing-md);
        border: none;
        border-radius: var(--radius-sm);
        background-color: color-mix(in srgb, var(--text-color) 10%, transparent);
        color: var(--text-color);
        cursor: pointer;
        transition: all var(--transition-fast);
    }

    .toc-button:hover,
    .toc-button:focus {
        background-color: color-mix(in srgb, var(--text-color) 20%, transparent);
    }

    /* Images */
    .project-figure {
        margin: var(--spacing-md) 0;
        contain: content;
    }

    .project-image {
        width: 100%;
        height: auto;
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-lg);
        will-change: transform;
    }

    /* Info Grid */
    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--spacing-sm);
        margin: var(--spacing-md) 0;
    }

    .info-card {
        padding: var(--spacing-md);
        background-color: color-mix(in srgb, var(--background-color) 80%, transparent);
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-sm);
    }

    /* Lists */
    .role-bullet-item {
        list-style-type: disc;
        margin-bottom: var(--spacing-xs);
        font-size: clamp(1rem, 2vw, 1.25rem);
        line-height: 1.6;
        color: var(--text-color);
    }

    /* Links */
    .source-link {
        display: inline-block;
        margin-top: var(--spacing-lg);
        padding: var(--spacing-sm) var(--spacing-md);
        color: var(--text-color);
        text-decoration: none;
        border-radius: var(--radius-sm);
        background-color: color-mix(in srgb, var(--text-color) 10%, transparent);
        transition: all var(--transition-fast);
    }

    .source-link:hover,
    .source-link:focus {
        background-color: color-mix(in srgb, var(--text-color) 20%, transparent);
        transform: translateY(-2px);
    }

    /* Sections */
    section {
        scroll-margin-top: calc(var(--nav-height) + 1rem);
        padding-top: calc(var(--nav-height) / 2);
    }

    .content-section {
        margin: var(--spacing-lg) 0;
    }

    /* Responsive Design */
    @media (max-width: 1380px) {
        .project-page-container {
            margin-left: 12%;
            margin-right: 12%;
        }
    }

    @media (max-width: 768px) {
        .project-page-container {
            margin-left: var(--spacing-sm);
            margin-right: var(--spacing-sm);
            padding: var(--spacing-sm);
        }

        section {
            padding-top: calc(var(--nav-height) / 3);
        }

        .content-section {
            margin: var(--spacing-md) 0;
        }
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .toc-visible {
        animation: fadeIn var(--transition-normal);
    }

    /* Focus Styles */
    :focus {
        outline: 2px solid var(--text-color);
        outline-offset: 2px;
    }

    /* Print Styles */
    @media print {
        #left-tray {
            display: none;
        }

        .project-page-container {
            margin: 0;
            padding: 0;
        }

        .project-image {
            max-width: 100%;
            page-break-inside: avoid;
        }
    }
</style>
