--- 
import BaseLayout from "../../layouts/BaseLayout.astro";
import { client } from "../../../tina/__generated__/client";
import { marked } from "marked";

export async function getStaticPaths() {
  const postsResponse = await client.queries.postConnection();
  const edges = postsResponse?.data?.postConnection?.edges ?? [];

  // Exclude drafts from static generation, support .md and .mdx slugs
  return edges.flatMap((edge) => {
    if (!edge?.node) return [];
    const node: any = edge.node;
    if (node.draft) return [];
    const slug = node._sys?.filename?.replace(/\.mdx?$/i, "").toLowerCase();
    return [{ params: { slug }, props: node }];
  });
}

const { title, date, content, links, hero } = Astro.props as any;

const displayDate = date
  ? new Date(date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
  : "";

 // Resolve hero path respecting Astro's base for production subpaths
 function resolveHero() {
   const raw = typeof hero === "string" ? hero : null;
   if (!raw) return null;
   // Keep absolute HTTP(S) URLs unchanged
   if (/^https?:\/\//i.test(raw)) return raw;
   // Use Astro's base; default to "/"
   const base = import.meta.env.BASE_URL || "/";
   // Remove any leading slashes from the raw path to avoid duplicate slashes
   const clean = raw.replace(/^\/+/, "");
   // Ensure exactly one slash between base and path
   return base.endsWith("/") ? base + clean : base + "/" + clean;
 }
 const heroUrl = resolveHero();

// Render Markdown -> HTML at build time
const renderedContent = content ? marked.parse(content) : "";
---

<BaseLayout title={title}>
  <article>
    <header class="post-header">
      <h1 class="post-title">{title}</h1>
      {date && <p class="publish-date">{displayDate}</p>}
    </header>

    <!-- Rendered Markdown (server-side) -->
    <div class="prose" set:html={renderedContent} />

    {
      links && links.length > 0 && (
        <div class="project-links">
          <div class="links-container">
            {links
              .filter((link: any) => !!link?.url)
              .map((link: any) => (
                <a
                  href={link!.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="project-link"
                >
                  {link!.label}
                </a>
              ))}
          </div>
        </div>
      )
    }

    {heroUrl && (
      <figure class="hero">
        <button
          type="button"
          class="hero-trigger"
          aria-label="Open image in full size"
        >
          <img src={heroUrl} alt={`${title} hero image`} loading="lazy" />
        </button>
      </figure>
    )}

    {heroUrl && (
      <div id="image-lightbox" class="lightbox is-hidden" aria-hidden="true">
        <div class="lightbox-content" role="dialog" aria-modal="true" aria-label={`${title} hero image full size`} tabindex="-1">
          <img src={heroUrl} alt={`${title} hero image full size`} />
          <button class="lightbox-close" type="button" aria-label="Close image" data-close>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M18.3 5.7a1 1 0 0 0-1.4 0L12 10.6 7.1 5.7a1 1 0 0 0-1.4 1.4L10.6 12l-4.9 4.9a1 1 0 1 0 1.4 1.4L12 13.4l4.9 4.9a1 1 0 0 0 1.4-1.4L13.4 12l4.9-4.9a1 1 0 0 0 0-1.4z"/>
            </svg>
          </button>
        </div>
      </div>
    )}
  </article>

  {heroUrl && (
    <script>
      (() => {
        // Grab elements and narrow types after guarding for null
        const lightboxEl = document.getElementById('image-lightbox');
        const trigger = document.querySelector('.hero .hero-trigger') as HTMLElement | null;
        if (!lightboxEl || !trigger) return;

        const lightbox = lightboxEl as HTMLElement;
        const content = lightbox.querySelector('.lightbox-content') as HTMLElement | null;
        let lastFocusedEl: HTMLElement | null = null;

        function open() {
          lastFocusedEl = document.activeElement instanceof HTMLElement ? document.activeElement : null;
          lightbox.classList.remove('is-hidden');
          lightbox.setAttribute('aria-hidden', 'false');
          document.body.style.overflow = 'hidden';
          if (content) {
            content.focus();
          }
        }

        function close() {
          lightbox.classList.add('is-hidden');
          lightbox.setAttribute('aria-hidden', 'true');
          document.body.style.overflow = '';
          if (lastFocusedEl) {
            lastFocusedEl.focus();
          }
        }

        trigger.addEventListener('click', open);

        // Close on Escape (when lightbox is open)
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && !lightbox.classList.contains('is-hidden')) close();
        });

        // Close when clicking outside the image/content or on elements with data-close
        lightbox.addEventListener('click', (e) => {
          if (!(e.target instanceof Element)) return;
          if (e.target === lightbox || e.target.hasAttribute('data-close')) {
            close();
          }
        });

        // Simple focus trap: keep focus on content while open
        lightbox.addEventListener('keydown', (e) => {
          if (e.key === 'Tab' && content && !lightbox.classList.contains('is-hidden')) {
            e.preventDefault();
            content.focus();
          }
        });
      })();
    </script>
  )}
</BaseLayout>

<style>
  article {
    max-width: 80ch;
    margin: 0 auto;
    padding: 4rem 2rem;
    background-color: var(--m3-color-surface);
    color: var(--m3-color-on-surface);
  }

  .post-header {
    margin-bottom: 2.4rem;
    text-align: center;
  }

  .post-title {
    font-family: var(--m3-font-family-display);
    font-size: var(--m3-font-headline-large);
    color: var(--m3-color-primary);
    margin-bottom: 1.2rem;
    line-height: 1.2;
  }

  .publish-date {
    font-family: var(--m3-font-family-body);
    font-size: var(--m3-font-label-large);
    color: var(--m3-color-on-surface-variant);
    margin-bottom: 0.8rem;
  }

  .prose {
    font-family: var(--m3-font-family-body);
    font-size: var(--m3-font-body-large);
    line-height: 1.7;
    color: var(--m3-color-on-surface);
  }

  .prose :global(h2),
  .prose :global(h3),
  .prose :global(h4) {
    font-family: var(--m3-font-family-display);
    color: var(--m3-color-on-surface);
    margin-top: 4rem;
    margin-bottom: 2rem;
  }

  .prose :global(h2) {
    font-size: var(--m3-font-headline-small);
  }

  .prose :global(h3) {
    font-size: var(--m3-font-title-large);
  }

  .prose :global(h4) {
    font-size: var(--m3-font-title-medium);
  }

  .prose :global(p) {
    margin-bottom: 1.6rem;
  }

  .prose :global(a) {
    color: var(--m3-color-primary);
    text-decoration: none;
    border-bottom: 1px solid var(--m3-color-primary);
    transition: background-color 0.3s, color 0.3s;
  }

  .prose :global(a:hover) {
    background-color: var(--m3-color-primary);
    color: var(--m3-color-on-primary);
  }

  .prose :global(ul),
  .prose :global(ol) {
    margin-left: 2rem;
    margin-bottom: 1.6rem;
    padding-left: 2rem;
  }

  .prose :global(li) {
    margin-bottom: 0.8rem;
  }

  .prose :global(blockquote) {
    border-left: 4px solid var(--m3-color-outline);
    margin-left: 0;
    padding-left: 1.6rem;
    font-style: italic;
    color: var(--m3-color-on-surface-variant);
  }

  .prose :global(pre) {
    background-color: var(--m3-color-surface-variant);
    color: var(--m3-color-on-surface-variant);
    padding: 1.6rem;
    border-radius: 8px;
    overflow-x: auto;
  }

  .prose :global(code) {
    font-family: monospace;
    background-color: var(--m3-color-surface-variant);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
  }

  .prose :global(pre) :global(code) {
    background-color: transparent;
    padding: 0;
  }

  .project-links {
    margin-top: 4rem;
    border-top: 1px solid var(--m3-color-outline);
    padding-top: 2.4rem;
  }

  .links-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1.6rem;
    justify-content: center;
  }

  .project-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 2.4rem;
    border-radius: 2rem;
    font-family: var(--m3-font-family-body);
    font-size: var(--m3-font-label-large);
    font-weight: 500;
    text-decoration: none;
    background-color: var(--m3-color-primary-container);
    color: var(--m3-color-on-primary-container);
    transition: background-color 0.3s;
  }

  .project-link:hover {
    background-color: var(--m3-color-primary);
    color: var(--m3-color-on-primary);
  }

  .hero {
    width: 100%;
    aspect-ratio: 16 / 9;
    background-color: var(--m3-color-surface-variant);
    border-radius: 16px;
    overflow: hidden;
    margin: 2rem 0 0 0; /* hero placed after all text */
    border: 1px solid var(--m3-color-outline-variant);
  }

  .hero-trigger {
    all: unset;
    display: block;
    width: 100%;
    height: 100%;
    cursor: zoom-in;
  }

  .hero-trigger img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform .4s ease;
  }

  .hero-trigger:hover img {
    transform: scale(1.02);
  }

  /* Lightbox */
  .lightbox {
    position: fixed;
    inset: 0;
    background-color: rgba(0,0,0,0.75);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    z-index: 1000;
  }
  .lightbox.is-hidden {
    display: none;
  }
  .lightbox-content {
    position: relative;
    outline: none;
    max-width: min(95vw, 1400px);
    max-height: 90vh;
  }
  .lightbox-content img {
    display: block;
    max-width: 100%;
    max-height: 90vh;
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 12px;
    background-color: var(--m3-color-surface);
    box-shadow: 0 10px 30px rgba(0,0,0,0.4);
  }
  .lightbox-close {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 40px;
    height: 40px;
    border-radius: 999px;
    border: 1px solid var(--m3-color-outline-variant);
    background-color: var(--m3-color-surface-variant);
    color: var(--m3-color-on-surface-variant);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
  .lightbox-close:hover {
    background-color: var(--m3-color-primary);
    color: var(--m3-color-on-primary);
  }

  @media (max-width: 768px) {
    .post-title {
      font-size: var(--m3-font-headline-medium);
    }
    article {
      padding: 2.4rem 1.6rem;
    }
  }
</style>
