---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { client } from "../../../tina/__generated__/client";
import type { Post } from "../../../tina/__generated__/types";
// server-side render Markdown safely using marked (installed as a devDependency)
import { marked } from 'marked';

export async function getStaticPaths() {
	const postsResponse = await client.queries.postConnection();
	const posts = postsResponse.data.postConnection.edges;

	if (!posts) {
		return [];
	}

	return posts.flatMap((edge) => {
		if (!edge?.node) {
			return [];
		}
		// support .md and .mdx filenames when deriving slugs
		const slug = edge.node._sys.filename.replace(/\.mdx?$/i, "").toLowerCase();
		return [
			{
				params: { slug },
				props: edge.node,
			},
		];
	});
}

const { title, date, description = "", content, links } = Astro.props as any;
const displayDate = date
	? new Date(date).toLocaleDateString("en-US", {
			year: "numeric",
			month: "long",
			day: "numeric",
		})
	: "";

// Render Markdown -> HTML server-side using marked (keeps behavior deterministic at build time)
const renderedContent = content ? marked.parse(content) : "";
---

<BaseLayout title={title}>
	<article>
		<header class="post-header">
			<h1 class="post-title">{title}</h1>
			{date && <p class="publish-date">{displayDate}</p>}
			{description && <p class="description">{description}</p>}
		</header>

		<!-- Rendered Markdown (server-side) -->
		<div class="prose" set:html={renderedContent} />

		{
			links && links.length > 0 && (
				<div class="project-links">
					<div class="links-container">
						{links
							.filter((link: any) => !!link?.url)
							.map((link: any) => (
								<a
									href={link!.url}
									target="_blank"
									rel="noopener noreferrer"
									class="project-link"
								>
									{link!.label}
								</a>
							))}
					</div>
				</div>
			)
		}
	</article>
</BaseLayout>

<style>
	article {
		max-width: 80ch;
		margin: 0 auto;
		padding: 4rem 2rem;
		background-color: var(--m3-color-surface);
		color: var(--m3-color-on-surface);
	}

	.post-header {
		margin-bottom: 3.2rem;
		text-align: center;
	}

	.post-title {
		font-family: var(--m3-font-family-display);
		font-size: var(--m3-font-headline-large);
		color: var(--m3-color-primary);
		margin-bottom: 1.6rem;
		line-height: 1.2;
	}

	.publish-date {
		font-family: var(--m3-font-family-body);
		font-size: var(--m3-font-label-large);
		color: var(--m3-color-on-surface-variant);
		margin-bottom: 0.8rem;
	}

	.description {
		font-family: var(--m3-font-family-body);
		font-size: var(--m3-font-body-large);
		color: var(--m3-color-on-surface-variant);
		max-width: 65ch;
		margin: 0 auto;
	}

	.prose {
		font-family: var(--m3-font-family-body);
		font-size: var(--m3-font-body-large);
		line-height: 1.7;
		color: var(--m3-color-on-surface);
	}

	.prose :global(h2),
	.prose :global(h3),
	.prose :global(h4) {
		font-family: var(--m3-font-family-display);
		color: var(--m3-color-on-surface);
		margin-top: 4rem;
		margin-bottom: 2rem;
	}

	.prose :global(h2) {
		font-size: var(--m3-font-headline-small);
	}

	.prose :global(h3) {
		font-size: var(--m3-font-title-large);
	}

	.prose :global(h4) {
		font-size: var(--m3-font-title-medium);
	}

	.prose :global(p) {
		margin-bottom: 1.6rem;
	}

	.prose :global(a) {
		color: var(--m3-color-primary);
		text-decoration: none;
		border-bottom: 1px solid var(--m3-color-primary);
		transition:
			background-color 0.3s,
			color 0.3s;
	}

	.prose :global(a:hover) {
		background-color: var(--m3-color-primary);
		color: var(--m3-color-on-primary);
	}

	.prose :global(ul),
	.prose :global(ol) {
		margin-left: 2rem;
		margin-bottom: 1.6rem;
		padding-left: 2rem;
	}

	.prose :global(li) {
		margin-bottom: 0.8rem;
	}

	.prose :global(blockquote) {
		border-left: 4px solid var(--m3-color-outline);
		margin-left: 0;
		padding-left: 1.6rem;
		font-style: italic;
		color: var(--m3-color-on-surface-variant);
	}

	.prose :global(pre) {
		background-color: var(--m3-color-surface-variant);
		color: var(--m3-color-on-surface-variant);
		padding: 1.6rem;
		border-radius: 8px;
		overflow-x: auto;
	}

	.prose :global(code) {
		font-family: monospace;
		background-color: var(--m3-color-surface-variant);
		padding: 0.2rem 0.4rem;
		border-radius: 4px;
	}

	.prose :global(pre) :global(code) {
		background-color: transparent;
		padding: 0;
	}

	.project-links {
		margin-top: 4rem;
		border-top: 1px solid var(--m3-color-outline);
		padding-top: 2.4rem;
	}

	.links-container {
		display: flex;
		flex-wrap: wrap;
		gap: 1.6rem;
		justify-content: center;
	}

	.project-link {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 1rem 2.4rem;
		border-radius: 2rem;
		font-family: var(--m3-font-family-body);
		font-size: var(--m3-font-label-large);
		font-weight: 500;
		text-decoration: none;
		background-color: var(--m3-color-primary-container);
		color: var(--m3-color-on-primary-container);
		transition: background-color 0.3s;
	}

	.project-link:hover {
		background-color: var(--m3-color-primary);
		color: var(--m3-color-on-primary);
	}

	@media (max-width: 768px) {
		.post-title {
			font-size: var(--m3-font-headline-medium);
		}

		article {
			padding: 2.4rem 1.6rem;
		}
	}
</style>
